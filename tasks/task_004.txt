# Task ID: 4
# Title: Content Display Components
# Status: done
# Dependencies: 2, 3
# Priority: medium
# Description: Build components for displaying different content types with responsive design and implement cross-reference linking system.
# Details:
Create React components for displaying each content type: MonsterCard, SpellList, ClassDescription, EquipmentTable, etc. Ensure all components are responsive and maintain readability on mobile devices. Implement the cross-reference system that automatically links related content. Create hover tooltips that show quick previews of referenced content. Add bidirectional linking (backlinks). Ensure tables render correctly across all devices. Implement lazy loading for images with appropriate placeholders. Add copy-to-clipboard functionality for stat blocks and descriptions. Ensure all components follow the design principles and color scheme specified in the PRD.

# Test Strategy:
Test components with various content examples to ensure correct rendering. Verify responsive behavior across different screen sizes. Test cross-reference links to confirm they resolve to the correct content. Check tooltip functionality and content preview accuracy. Validate accessibility of all components with screen readers. Test image lazy loading behavior with throttled network connections.

# Subtasks:
## 1. Create Base Content Display Components [done]
### Dependencies: None
### Description: Develop the foundational React components for displaying different content types with consistent styling and layout structure.
### Details:
Implementation steps:
1. Create base component templates for MonsterCard, SpellList, ClassDescription, EquipmentTable, and RuleSection
2. Implement responsive container layouts for each component using CSS Grid/Flexbox
3. Define consistent typography, spacing, and color variables following the PRD
4. Create skeleton loading states for each component
5. Implement basic error handling for missing content
6. Set up component story files for development and testing

Testing approach:
- Create unit tests for each component with various data inputs
- Test responsive behavior using different viewport sizes
- Verify components render correctly with missing or malformed data

<info added on 2025-05-26T08:47:35.738Z>
## Component Architecture Recommendations

### Shared Component Structure
- Create a `BaseContentDisplay` abstract component that all content displays inherit from
- Implement a common `<ContentHeader>` component with title, subtitle, and action buttons
- Use composition pattern with specialized renderers for different content sections

### Technical Implementation Details
```tsx
// Example structure for MonsterCard
const MonsterCard: React.FC<MonsterCardProps> = ({ monster, loading, error }) => {
  if (loading) return <MonsterCardSkeleton />;
  if (error) return <ErrorDisplay message={error.message} />;
  
  return (
    <BaseContentCard className="monster-card">
      <ContentHeader 
        title={monster.name} 
        subtitle={`${monster.size} ${monster.type}, ${monster.alignment}`}
        tags={[`CR ${monster.challengeRating}`]} 
      />
      <StatBlock stats={monster.abilityScores} />
      <AttributeList 
        attributes={[
          { label: "Armor Class", value: `${monster.armorClass} (${monster.armorType})` },
          { label: "Hit Points", value: `${monster.hitPoints} (${monster.hitDice})` },
          { label: "Speed", value: formatSpeeds(monster.speed) }
        ]} 
      />
      <AbilitySection abilities={monster.specialAbilities} />
      <ActionSection actions={monster.actions} />
    </BaseContentCard>
  );
};
```

### Accessibility Considerations
- Implement proper ARIA roles for each component type (e.g., `role="table"` for EquipmentTable)
- Ensure color contrast meets WCAG AA standards (4.5:1 for normal text)
- Add keyboard navigation for interactive elements
- Include screen reader text for visual elements

### Performance Optimizations
- Use React.memo() for components that receive the same props frequently
- Implement virtualization for long lists (SpellList, EquipmentTable)
- Lazy load images and heavy content
- Add debounced resize handlers for responsive adjustments
</info added on 2025-05-26T08:47:35.738Z>

## 2. Implement Mobile-Responsive Table Components [done]
### Dependencies: 4.1
### Description: Create specialized table components that maintain readability and usability across all device sizes, with particular focus on mobile optimization.
### Details:
Implementation steps:
1. Create a responsive table component with horizontal scrolling for wide tables
2. Implement collapsible rows for complex data on mobile devices
3. Add column prioritization to hide less important columns on smaller screens
4. Create card-view alternative for tables on mobile devices
5. Implement sortable columns with appropriate mobile interactions
6. Add zebra striping and appropriate spacing for readability

Testing approach:
- Test tables with various column counts and data densities
- Verify readability on mobile devices (320px width minimum)
- Test touch interactions for sorting and expanding collapsed rows
- Ensure accessibility standards are met with proper ARIA attributes

<info added on 2025-05-26T09:21:41.044Z>
## Components Created

### 1. ResponsiveTable (`src/components/ui/responsive-table.tsx`)
- **Horizontal scrolling** with visual scroll indicators and smooth navigation
- **Sticky headers and columns** for better navigation in large tables
- **Enhanced touch interactions** with proper touch target sizes (44x44px minimum)
- **Column visibility controls** allowing users to show/hide columns
- **Loading skeletons** and error states

### 2. MobileCardTable (`src/components/ui/mobile-card-table.tsx`)
- **Card-based layout** optimized for mobile devices
- **Field prioritization** with header, summary, and detail sections
- **Collapsible sections** for complex data with "show more/less" functionality
- **Search integration** with highlighting and filtering
- **Performance optimization** with virtualized loading and pagination

### 3. AdaptiveTable (`src/components/ui/adaptive-table.tsx`)
- **Intelligent view switching** between table and card views based on:
  - Screen size (mobile < 768px, tablet < 1024px, desktop >= 1024px)
  - Data complexity (column count, custom renderers)
  - User preferences with localStorage persistence
- **Automatic breakpoint detection** with customizable thresholds
- **Manual view controls** with auto/table/cards options
- **User preference persistence** across sessions

### 4. Enhanced Equipment Table Implementation
- **Integrated adaptive table** with the existing EquipmentTable component
- **Column definitions** with proper priorities and responsive behavior
- **Enhanced rendering** with icons, formatting, and visual improvements
- **Backward compatibility** maintaining existing API

## Technical Features Implemented

### Column Prioritization System
```typescript
priority: 1 | 2 | 3 | 4 | 5
// 1 = Always visible (name, primary identifier)
// 2 = High priority (cost, key stats)
// 3 = Medium priority (weight, secondary stats)
// 4 = Low priority (damage, AC)
// 5 = Lowest priority (properties, descriptions)
```

### Responsive Breakpoints
- **Mobile**: < 768px - Always uses card view
- **Tablet**: 768px - 1024px - Uses cards for complex data (>6 columns)
- **Desktop**: >= 1024px - Uses table view unless >10 columns

### Touch Interactions
- **Minimum touch targets**: 44x44px for all interactive elements
- **Swipe gestures**: Horizontal scrolling with momentum
- **Touch feedback**: Visual feedback for all touch interactions
- **Scroll indicators**: Visual cues for horizontal scrolling availability

### Performance Optimizations
- **Virtualized rendering** for large datasets
- **Memoized calculations** for filtering and sorting
- **Debounced interactions** for smooth performance
- **Progressive loading** with "Load More" functionality
- **Efficient re-renders** using React.memo and useMemo

### Integration Points
- **BaseContentCard** integration for consistent styling
- **Existing filter systems** compatibility maintained
- **TypeScript interfaces** for type safety
- **Lucide React icons** for consistent iconography
- **Tailwind CSS** classes for responsive design
</info added on 2025-05-26T09:21:41.044Z>

## 3. Build Cross-Reference Linking System [done]
### Dependencies: 4.1
### Description: Develop the core system for automatically identifying and linking related content across different components.
### Details:
Implementation steps:
1. Create a content reference parser that identifies references in text (e.g., spell names, monster names)
2. Implement a link generation system that creates appropriate links to referenced content
3. Build a reference registry to track all cross-references for bidirectional linking
4. Create a LinkableText component that wraps text content and processes references
5. Implement reference validation to handle missing or invalid references
6. Add configuration options for controlling reference behavior

Testing approach:
- Test with various text patterns to ensure correct reference detection
- Verify links point to correct content
- Test edge cases like nested references or references in headings
- Benchmark performance with large text blocks containing many references

<info added on 2025-05-26T09:27:34.027Z>
# Core Components Implementation Details

## ReferenceParser Implementation

```typescript
// Pattern definition example with confidence scoring
export interface ReferencePattern {
  pattern: RegExp;
  contentType: ContentType;
  referenceType: ReferenceType;
  priority: number;
  contextWords?: string[];
  confidenceModifier?: (match: string, context: string) => number;
}

// Example implementation of confidence scoring
function calculateConfidence(match: string, context: string, pattern: ReferencePattern): number {
  let confidence = 0.7; // Base confidence
  
  // Content index validation
  if (contentExists(match, pattern.contentType)) {
    confidence += 0.2;
  }
  
  // Context word matching
  if (pattern.contextWords && pattern.contextWords.length > 0) {
    const contextWordsFound = pattern.contextWords.filter(word => 
      new RegExp(`\\b${word}\\b`, 'i').test(context)
    ).length;
    confidence += Math.min(0.1, (contextWordsFound / pattern.contextWords.length) * 0.1);
  }
  
  // Length penalty for very short references
  if (match.length < 4) {
    confidence -= 0.2;
  }
  
  // Apply custom confidence modifier if provided
  if (pattern.confidenceModifier) {
    confidence += pattern.confidenceModifier(match, context);
  }
  
  return Math.max(0, Math.min(1, confidence));
}
```

## ReferenceRegistry Data Structure

```typescript
class ReferenceRegistry {
  private sourceToTargets: Map<string, Set<Reference>> = new Map();
  private targetToSources: Map<string, Set<Reference>> = new Map();
  private contentTypeIndex: Map<ContentType, Set<string>> = new Map();
  private referenceTypeIndex: Map<ReferenceType, Set<string>> = new Map();
  
  // Efficient bidirectional reference tracking
  addReference(reference: Reference): void {
    const sourceKey = this.getContentKey(reference.sourceId, reference.sourceType);
    const targetKey = this.getContentKey(reference.targetId, reference.targetType);
    
    // Add to source → target mapping
    if (!this.sourceToTargets.has(sourceKey)) {
      this.sourceToTargets.set(sourceKey, new Set());
    }
    this.sourceToTargets.get(sourceKey)!.add(reference);
    
    // Add to target → source mapping
    if (!this.targetToSources.has(targetKey)) {
      this.targetToSources.set(targetKey, new Set());
    }
    this.targetToSources.get(targetKey)!.add(reference);
    
    // Update indexes for efficient querying
    this.updateContentTypeIndex(reference);
    this.updateReferenceTypeIndex(reference);
  }
  
  // Example of advanced querying
  queryReferences({
    sourceType,
    targetType,
    referenceType,
    confidenceThreshold = 0.5,
    validated = true
  }: ReferenceQuery): Reference[] {
    // Implementation of multi-criteria filtering
    // ...
  }
}
```

## LinkableText Component Optimization

```tsx
const LinkableText: React.FC<LinkableTextProps> = ({
  children,
  references,
  searchQuery,
  onLinkClick,
  maxSegmentLength = 1000
}) => {
  // Performance optimization for large text blocks
  const processTextSegments = useCallback((text: string) => {
    if (text.length < maxSegmentLength) {
      return processSegment(text);
    }
    
    // Split large text into manageable segments at sentence boundaries
    const segments = text.match(/[^.!?]+[.!?]+/g) || [text];
    let processedSegments: React.ReactNode[] = [];
    let currentBatch = '';
    
    segments.forEach(segment => {
      if ((currentBatch.length + segment.length) < maxSegmentLength) {
        currentBatch += segment;
      } else {
        if (currentBatch) {
          processedSegments.push(processSegment(currentBatch));
        }
        currentBatch = segment;
      }
    });
    
    if (currentBatch) {
      processedSegments.push(processSegment(currentBatch));
    }
    
    return processedSegments;
  }, [references, searchQuery, onLinkClick]);
  
  // Process individual text segment with references and highlighting
  const processSegment = (text: string) => {
    // Implementation of reference linking and search highlighting
    // ...
  };
  
  return <>{processTextSegments(children)}</>;
};
```

## CrossReferenceManager Event System

```typescript
class CrossReferenceManager {
  private eventEmitter = new EventEmitter();
  
  // Event-driven architecture
  on(event: 'referenceProcessed' | 'contentAdded' | 'batchCompleted' | 'validationComplete', 
     callback: (data: any) => void): void {
    this.eventEmitter.on(event, callback);
  }
  
  // Batch processing with progress tracking
  async processBatch(contentItems: ContentItem[], batchSize = 50): Promise<void> {
    const batches = [];
    for (let i = 0; i < contentItems.length; i += batchSize) {
      batches.push(contentItems.slice(i, i + batchSize));
    }
    
    let processedCount = 0;
    for (const batch of batches) {
      await Promise.all(batch.map(item => this.processContent(item)));
      processedCount += batch.length;
      this.eventEmitter.emit('batchCompleted', {
        processed: processedCount,
        total: contentItems.length,
        percentComplete: (processedCount / contentItems.length) * 100
      });
    }
  }
  
  // Performance monitoring
  private async processContent(content: ContentItem): Promise<void> {
    const startTime = performance.now();
    // Process content and extract references
    // ...
    const endTime = performance.now();
    
    this.eventEmitter.emit('referenceProcessed', {
      contentId: content.id,
      processingTime: endTime - startTime,
      referencesFound: references.length
    });
  }
}
```

## Advanced Pattern Library Examples

```typescript
const spellPatterns: ReferencePattern[] = [
  {
    pattern: /\b([A-Z][a-z]+(?: [A-Z][a-z]+)*)\s+spell\b/g,
    contentType: ContentType.SPELL,
    referenceType: ReferenceType.MENTIONS,
    priority: 10,
    contextWords: ['cast', 'casting', 'magic', 'arcane', 'divine']
  },
  {
    pattern: /\bspell(?:s)? (?:of|called|known as) ([A-Z][a-z]+(?: [A-Z][a-z]+)*)\b/g,
    contentType: ContentType.SPELL,
    referenceType: ReferenceType.MENTIONS,
    priority: 9
  },
  {
    pattern: /\b(Magic Missile|Fireball|Lightning Bolt|Sleep|Charm Person|Invisibility|Fly|Teleport|Wish|Resurrection)\b/g,
    contentType: ContentType.SPELL,
    referenceType: ReferenceType.MENTIONS,
    priority: 15, // Higher priority for exact spell names
    confidenceModifier: (match) => match.split(' ').length > 1 ? 0.1 : 0 // Bonus for multi-word spells
  }
];
```
</info added on 2025-05-26T09:27:34.027Z>

## 4. Implement Hover Tooltips and Previews [done]
### Dependencies: 4.3
### Description: Create an interactive tooltip system that shows quick previews of referenced content when hovering over links.
### Details:
Implementation steps:
1. Create a TooltipProvider component to manage tooltip state and positioning
2. Implement content preview components for each content type (condensed versions)
3. Add hover detection with appropriate delays and touch alternatives
4. Implement smart positioning to keep tooltips within viewport
5. Add loading states for asynchronously loaded preview content
6. Implement keyboard navigation for accessibility

Testing approach:
- Test tooltip positioning in various viewport sizes and scroll positions
- Verify touch interactions work correctly on mobile devices
- Test keyboard accessibility
- Ensure tooltips don't cause layout shifts or performance issues
- Test with screen readers to verify accessibility

<info added on 2025-05-26T09:36:16.763Z>
## Technical Implementation Details

### TooltipProvider Architecture
```tsx
// Core positioning algorithm with collision detection
const calculatePosition = useCallback((
  triggerRect: DOMRect, 
  tooltipRect: DOMRect, 
  preferredPosition: Position = 'bottom'
): PositionResult => {
  const positions: Position[] = [
    preferredPosition,
    'bottom', 'top', 'right', 'left',
    'bottom-start', 'bottom-end', 'top-start', 'top-end'
  ];
  
  // Try each position until one fits within viewport
  for (const pos of positions) {
    const coords = getCoordinatesForPosition(triggerRect, tooltipRect, pos);
    if (isWithinViewport(coords, tooltipRect)) {
      return { position: pos, x: coords.x, y: coords.y };
    }
  }
  
  // Fallback to preferred position with constrained coordinates
  const coords = getCoordinatesForPosition(triggerRect, tooltipRect, preferredPosition);
  return { 
    position: preferredPosition,
    x: Math.max(10, Math.min(coords.x, window.innerWidth - tooltipRect.width - 10)),
    y: Math.max(10, Math.min(coords.y, window.innerHeight - tooltipRect.height - 10))
  };
}, []);
```

### Content Preview Optimization
- Implemented content-specific skeleton loaders that match final content shape
- Added 150ms delay before showing loading state to prevent flicker
- Cache preview data with React Query with 5-minute stale time:

```tsx
const { data, isLoading, error } = useQuery({
  queryKey: ['content-preview', contentType, contentId],
  queryFn: () => fetchContentPreview(contentType, contentId),
  staleTime: 1000 * 60 * 5, // 5 minutes
  cacheTime: 1000 * 60 * 30, // 30 minutes
});
```

### Touch Device Handling
```tsx
// Touch device detection and alternative interaction
const isTouchDevice = useMediaQuery('(pointer: coarse)');

useEffect(() => {
  if (!triggerRef.current || !isTouchDevice) return;
  
  const trigger = triggerRef.current;
  let touchTimer: ReturnType<typeof setTimeout>;
  
  const handleTouchStart = (e: TouchEvent) => {
    e.preventDefault();
    touchTimer = setTimeout(() => {
      setIsOpen(true);
      // Add haptic feedback if available
      if (window.navigator.vibrate) {
        window.navigator.vibrate(50);
      }
    }, 500); // 500ms hold to show tooltip
  };
  
  const handleTouchEnd = () => {
    clearTimeout(touchTimer);
  };
  
  trigger.addEventListener('touchstart', handleTouchStart, { passive: false });
  trigger.addEventListener('touchend', handleTouchEnd);
  trigger.addEventListener('touchcancel', handleTouchEnd);
  
  return () => {
    trigger.removeEventListener('touchstart', handleTouchStart);
    trigger.removeEventListener('touchend', handleTouchEnd);
    trigger.removeEventListener('touchcancel', handleTouchEnd);
    clearTimeout(touchTimer);
  };
}, [isTouchDevice, setIsOpen]);
```

### Performance Optimizations
- Implemented IntersectionObserver to only activate tooltips for visible elements
- Used React.memo for preview components with custom equality function
- Added dynamic import with React.lazy for heavy preview components:

```tsx
const MonsterPreview = React.lazy(() => import('./previews/monster-preview'));
const SpellPreview = React.lazy(() => import('./previews/spell-preview'));
// Additional preview components...

// Suspense wrapper in render
<React.Suspense fallback={<PreviewSkeleton type={contentType} />}>
  {renderContentPreview(contentType, data)}
</React.Suspense>
```

### Accessibility Enhancements
- Added focus trap within tooltip when keyboard navigated
- Implemented proper ARIA live regions for dynamic content:

```tsx
<div 
  role="tooltip" 
  id={tooltipId}
  aria-live="polite"
  className={styles.tooltip}
  ref={tooltipRef}
  {...(isKeyboardNav && { tabIndex: 0 })}
>
  {children}
  {isKeyboardNav && (
    <div className={styles.tooltipInstructions} aria-hidden="true">
      Press Escape to close
    </div>
  )}
</div>
```

### Integration with Existing Systems
- Created custom hook for tooltip integration with LinkableText:

```tsx
export function useTooltipForReference(reference: Reference) {
  const { contentType, contentId } = parseReference(reference);
  const tooltipId = `tooltip-${contentType}-${contentId}`;
  
  return {
    'aria-describedby': tooltipId,
    'data-tooltip-trigger': true,
    'data-content-type': contentType,
    'data-content-id': contentId,
    'data-tooltip-id': tooltipId
  };
}
```
</info added on 2025-05-26T09:36:16.763Z>

## 5. Implement Lazy Loading and Performance Optimizations [done]
### Dependencies: 4.1, 4.2
### Description: Add lazy loading for images and heavy content with appropriate placeholders to improve performance.
### Details:
Implementation steps:
1. Implement lazy loading for images using Intersection Observer API
2. Create appropriate placeholder components for each content type
3. Add progressive image loading for larger images
4. Implement virtualization for long lists (e.g., spell lists, equipment tables)
5. Add code-splitting for larger component trees
6. Implement memoization for expensive rendering operations

Testing approach:
- Measure and compare performance metrics before and after implementation
- Test loading behavior on slow connections
- Verify placeholder appearance during loading
- Test scroll performance with large data sets
- Ensure accessibility is maintained with lazy-loaded content

<info added on 2025-05-26T09:45:13.033Z>
Here's the additional information to enhance the subtask:

### Technical Implementation Details

#### Intersection Observer Implementation
```typescript
// Example implementation for lazy image loading
const LazyImage = ({ src, alt, placeholder, ...props }) => {
  const [isLoaded, setIsLoaded] = useState(false);
  const imgRef = useRef(null);
  
  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const img = imgRef.current;
            if (img && img.dataset.src) {
              img.src = img.dataset.src;
              img.onload = () => setIsLoaded(true);
              observer.unobserve(img);
            }
          }
        });
      },
      { rootMargin: '200px 0px', threshold: 0.01 }
    );
    
    if (imgRef.current) observer.observe(imgRef.current);
    return () => observer.disconnect();
  }, []);
  
  return (
    <div className="lazy-image-container">
      {!isLoaded && <div className="placeholder">{placeholder}</div>}
      <img 
        ref={imgRef}
        className={`lazy-image ${isLoaded ? 'loaded' : 'loading'}`}
        src={placeholder || "data:image/svg+xml;base64,..."}
        data-src={src}
        alt={alt}
        {...props}
      />
    </div>
  );
};
```

#### Virtualization Strategy
For long lists like spell tables or equipment lists, implement a windowing technique:

```typescript
// Basic virtualization hook
function useVirtualization(itemCount, itemHeight, viewportHeight) {
  const [scrollTop, setScrollTop] = useState(0);
  
  // Calculate visible range
  const startIndex = Math.max(0, Math.floor(scrollTop / itemHeight));
  const endIndex = Math.min(
    itemCount - 1,
    Math.floor((scrollTop + viewportHeight) / itemHeight)
  );
  
  // Add overscan for smoother scrolling
  const overscan = 5;
  const visibleStartIndex = Math.max(0, startIndex - overscan);
  const visibleEndIndex = Math.min(itemCount - 1, endIndex + overscan);
  
  // Items to render
  const visibleItems = [];
  for (let i = visibleStartIndex; i <= visibleEndIndex; i++) {
    visibleItems.push(i);
  }
  
  return {
    visibleItems,
    totalHeight: itemCount * itemHeight,
    offsetY: visibleStartIndex * itemHeight,
    onScroll: (e) => setScrollTop(e.target.scrollTop)
  };
}
```

#### Memoization Patterns
```typescript
// Memoize expensive calculations for spell filtering
const filteredSpells = useMemo(() => {
  return spells
    .filter(spell => {
      // Complex filtering logic here
      return spell.level <= filterLevel && 
             spell.school.includes(filterSchool) &&
             (filterText === '' || spell.name.toLowerCase().includes(filterText));
    })
    .sort((a, b) => {
      // Complex sorting logic
      return a.level - b.level || a.name.localeCompare(b.name);
    });
}, [spells, filterLevel, filterSchool, filterText]);

// Use React.memo for pure components that render frequently
const SpellCard = React.memo(({ spell }) => {
  // Render spell card
}, (prevProps, nextProps) => {
  // Custom comparison function for complex objects
  return prevProps.spell.id === nextProps.spell.id && 
         prevProps.spell.lastUpdated === nextProps.spell.lastUpdated;
});
```

#### Progressive Image Loading
```css
/* CSS for progressive image loading */
.progressive-image {
  filter: blur(20px);
  transition: filter 0.3s ease-out;
}

.progressive-image.loaded {
  filter: blur(0);
}
```

#### Performance Testing Metrics
- First Contentful Paint (FCP): Target < 1.8s
- Largest Contentful Paint (LCP): Target < 2.5s
- First Input Delay (FID): Target < 100ms
- Cumulative Layout Shift (CLS): Target < 0.1
- Time to Interactive (TTI): Target < 3.8s

#### Code Splitting Configuration
```javascript
// webpack.config.js
module.exports = {
  // ...
  optimization: {
    splitChunks: {
      chunks: 'all',
      maxInitialRequests: Infinity,
      minSize: 20000,
      cacheGroups: {
        vendor: {
          test: /[\\/]node_modules[\\/]/,
          name(module) {
            // Get the name of the npm package
            const packageName = module.context.match(
              /[\\/]node_modules[\\/](.*?)([\\/]|$)/
            )[1];
            return `npm.${packageName.replace('@', '')}`;
          },
        },
      },
    },
  },
};
```

#### Accessibility Considerations for Lazy Loading
- Ensure proper focus management when new content loads
- Add appropriate ARIA attributes for loading states:
  ```html
  <div aria-live="polite" aria-busy="true">Loading content...</div>
  ```
- Maintain keyboard navigation for dynamically loaded content
- Provide text alternatives for placeholder content
</info added on 2025-05-26T09:45:13.033Z>

## 6. Add Interactive Features and Backlinks [done]
### Dependencies: 4.1, 4.3, 4.4
### Description: Implement copy-to-clipboard functionality, bidirectional linking (backlinks), and final polish for all components.
### Details:
Implementation steps:
1. Implement copy-to-clipboard functionality for stat blocks and descriptions
2. Add visual feedback for copied content
3. Create a backlink display component showing where current content is referenced
4. Implement backlink aggregation using the reference registry
5. Add sorting and filtering options for backlinks
6. Perform final accessibility and responsive design review

Testing approach:
- Test copy functionality across different browsers
- Verify backlinks are correctly aggregated and displayed
- Test with screen readers and keyboard navigation
- Perform end-to-end testing of the complete content display system
- Conduct user testing to verify usability of all features

