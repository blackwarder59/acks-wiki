# Task ID: 3
# Title: Search and Navigation System
# Status: done
# Dependencies: 1, 2
# Priority: high
# Description: Implement comprehensive search functionality with filters and develop intuitive navigation system optimized for mobile gaming.
# Details:
Integrate Fuse.js for client-side fuzzy search. Implement real-time search with results appearing as user types. Create filters for content types (monsters, spells, classes, equipment, domain rules, judge tools) and ACKS-specific attributes (spell level, character level, monster HD, class type). Add search suggestions and autocomplete functionality. Develop breadcrumb navigation showing content hierarchy. Create mobile-optimized menu with swipe gestures. Implement bookmark system using local storage. Add recently viewed content tracking. Ensure all navigation elements have proper accessibility attributes.

# Test Strategy:
Test search performance with the full dataset, ensuring results appear within 100ms. Verify filters correctly narrow search results. Test navigation on various mobile devices and screen sizes. Validate bookmarking and history features persist correctly. Conduct accessibility testing on navigation elements. Test keyboard navigation for all interactive elements.

# Subtasks:
## 1. Integrate Fuse.js for Real-time Search [done]
### Dependencies: None
### Description: Set up Fuse.js library and implement real-time search functionality that updates results as the user types.
### Details:
1. Install and configure Fuse.js library
2. Create a search input component with event listeners for input changes
3. Implement debounce functionality to limit API calls during typing
4. Set up Fuse.js with appropriate configuration options (threshold, keys to search, etc.)
5. Create a search results component that updates in real-time
6. Implement highlighting of matched text in search results
7. Optimize for performance by limiting result set size and using virtualized lists for large result sets
8. Test search functionality with various query types and ensure results appear within 200ms of typing
9. Add keyboard navigation support for search results

<info added on 2025-05-26T07:30:36.910Z>
## Implementation Details for Fuse.js Integration

### Fuse.js Configuration
```typescript
const fuseOptions = {
  includeScore: true,
  threshold: 0.3,
  keys: [
    { name: 'name', weight: 2.0 },
    { name: 'title', weight: 2.0 },
    { name: 'description', weight: 1.0 },
    { name: 'tags', weight: 1.5 },
    { name: 'content', weight: 0.8 }
  ],
  ignoreLocation: true,
  useExtendedSearch: true,
  findAllMatches: false,
  minMatchCharLength: 2
};
```

### Debounce Implementation
```typescript
const debouncedSearch = useCallback(
  debounce((query: string) => {
    if (query.length < 2) {
      setResults([]);
      setIsSearching(false);
      return;
    }
    
    setIsSearching(true);
    const searchResults = fuse.search(query, { limit: 50 });
    setResults(searchResults);
    setIsSearching(false);
  }, 300),
  [fuse]
);
```

### Result Highlighting Function
```typescript
const highlightMatch = (text: string, query: string): React.ReactNode => {
  if (!query || query.length < 2) return text;
  
  const regex = new RegExp(`(${escapeRegExp(query)})`, 'gi');
  const parts = text.split(regex);
  
  return parts.map((part, i) => 
    regex.test(part) ? <mark key={i}>{part}</mark> : part
  );
};
```

### Performance Optimizations
- Implemented result caching using `useMemo` to prevent redundant searches
- Used virtualized lists via `react-window` for large result sets
- Added content type filtering to reduce search scope when appropriate
- Implemented progressive loading for search results (20 items initially, load more on scroll)
- Added request cancellation for in-flight searches when new input is received

### Accessibility Features
- Implemented ARIA live regions for announcing search results
- Added keyboard shortcuts (Ctrl+K/Cmd+K to focus search)
- Ensured proper focus management between search input and results
- Included screen reader announcements for loading states and result counts
</info added on 2025-05-26T07:30:36.910Z>

## 2. Implement Content Filters and Search Attributes [done]
### Dependencies: 3.1
### Description: Create a comprehensive filtering system for different content types and ACKS-specific attributes.
### Details:
1. Design filter UI components (dropdowns, checkboxes, sliders) for different filter types
2. Implement content type filters (monsters, spells, classes, equipment, domain rules, judge tools)
3. Add ACKS-specific attribute filters (spell level, character level, monster HD, class type)
4. Create filter state management that integrates with the search system
5. Implement filter combination logic (AND/OR relationships between filters)
6. Add clear filters and reset functionality
7. Ensure filters update search results in real-time
8. Make filters collapsible/expandable on mobile devices
9. Test filter combinations to ensure correct results are displayed
10. Implement filter persistence across sessions using local storage

<info added on 2025-05-26T07:31:15.305Z>
## Additional Implementation Details for Content Filters

### ACKS-Specific Attribute Filters Implementation

1. **Data Structure Design**:
   ```typescript
   interface FilterState {
     contentTypes: string[];
     attributes: {
       spellLevel: number[];
       characterLevel: [number, number]; // min-max range
       monsterHD: [number, number]; // min-max range
       classType: string[];
       equipmentCategory: string[];
       spellSchool: string[];
       // other attributes
     };
     filterLogic: 'AND' | 'OR';
   }
   ```

2. **Range Slider Implementation**:
   - Use `rc-slider` or similar React component for HD/level ranges
   - Implement debouncing (250-300ms) to prevent excessive re-renders during slider movement
   - Example for HD range:
     ```jsx
     <RangeSlider
       min={0.25}
       max={20}
       step={0.25}
       defaultValue={[0.25, 20]}
       onChange={(values) => updateFilter('monsterHD', values)}
       marks={{0.25: 'Â¼', 1: '1', 5: '5', 10: '10', 15: '15', 20: '20+'}}
     />
     ```

3. **Filter Combination Logic**:
   - Implement using reducer pattern:
     ```typescript
     function applyFilters(items, filters, logic = 'AND') {
       return items.filter(item => {
         if (logic === 'AND') {
           return Object.entries(filters).every(([key, value]) => 
             matchesFilter(item, key, value));
         } else {
           return Object.entries(filters).some(([key, value]) => 
             matchesFilter(item, key, value));
         }
       });
     }
     ```

4. **Filter Presets**:
   - Store common combinations as JSON configurations
   - Example preset structure:
     ```json
     {
       "lowLevelSpells": {
         "contentTypes": ["spells"],
         "attributes": {
           "spellLevel": [1, 2]
         }
       },
       "undeadMonsters": {
         "contentTypes": ["monsters"],
         "attributes": {
           "monsterType": ["undead"]
         }
       }
     }
     ```

5. **LocalStorage Persistence**:
   ```javascript
   // Save filters
   const saveFilters = (filters) => {
     localStorage.setItem('acksFilters', JSON.stringify(filters));
   };
   
   // Load filters on component mount
   useEffect(() => {
     const savedFilters = localStorage.getItem('acksFilters');
     if (savedFilters) {
       try {
         setFilters(JSON.parse(savedFilters));
       } catch (e) {
         console.error('Error loading saved filters');
       }
     }
   }, []);
   ```

6. **Collapsible Filter Sections**:
   - Implement using CSS transitions and state management
   - Track expanded sections in state
   - Add filter count badges to section headers (e.g., "Spell Filters (3)")

7. **Performance Optimization**:
   - Memoize filtered results with `useMemo`
   - Implement virtualized lists for large result sets
   - Use worker threads for complex filter operations on large datasets
</info added on 2025-05-26T07:31:15.305Z>

## 3. Develop Search Suggestions and Autocomplete [done]
### Dependencies: 3.1
### Description: Create intelligent search suggestions and autocomplete functionality to enhance user search experience.
### Details:
1. Design and implement a suggestions dropdown component
2. Create an API or data structure for common search terms and popular content
3. Implement autocomplete logic that shows suggestions as user types
4. Add recently searched terms to suggestions
5. Implement category-based suggestions (e.g., popular monsters, common spells)
6. Add keyboard navigation for selecting suggestions
7. Implement click/tap handling for suggestions
8. Ensure suggestions appear within 100ms of typing
9. Add analytics tracking for suggestion usage
10. Test suggestion relevance and accuracy with various input patterns
11. Implement proper accessibility attributes for the suggestions dropdown

<info added on 2025-05-26T07:48:23.291Z>
# Technical Implementation Details for Search Suggestions

## Search Suggestions Engine Architecture

```typescript
// Core suggestion engine architecture
class SearchSuggestionsEngine {
  private contentIndex: Map<string, ContentItem>;
  private popularTerms: Map<string, number>;
  private searchHistory: string[];
  private cache: Map<string, SearchSuggestion[]>;
  
  constructor(options: SearchSuggestionsOptions) {
    // Initialize with configurable thresholds
    this.fuzzyMatchThreshold = options.fuzzyMatchThreshold || 0.7;
    this.maxSuggestions = options.maxSuggestions || 8;
    this.cacheTimeout = options.cacheTimeout || 60000;
  }
  
  // Main suggestion generation method
  getSuggestions(query: string, context?: SearchContext): SearchSuggestion[] {
    // Implementation details for intelligent suggestion prioritization
  }
}
```

## Fuzzy Matching Implementation

The fuzzy matching algorithm uses Levenshtein distance with character-level weighting:

```typescript
function fuzzyMatch(query: string, target: string): number {
  // Normalize inputs
  const normalizedQuery = query.toLowerCase().trim();
  const normalizedTarget = target.toLowerCase().trim();
  
  // Early exact match detection
  if (normalizedTarget.includes(normalizedQuery)) return 1.0;
  
  // Calculate Levenshtein distance with position weighting
  const distance = levenshteinDistance(normalizedQuery, normalizedTarget);
  const maxLength = Math.max(normalizedQuery.length, normalizedTarget.length);
  
  // Apply character position weighting (first chars more important)
  return 1 - (distance / maxLength) * (1 - firstCharBonus);
}
```

## Performance Optimizations

- **Tiered Caching**: Two-level cache with in-memory and sessionStorage
- **Debounced Processing**: 50ms debounce for suggestion generation
- **Incremental Indexing**: Content indexed asynchronously in chunks
- **Worker Thread Processing**: Heavy suggestion computation offloaded to Web Worker

## Analytics Integration

```typescript
// Track suggestion usage with metadata
trackSuggestionUsage(suggestion: SearchSuggestion, action: 'select'|'view'): void {
  const analytics = {
    term: suggestion.text,
    type: suggestion.type,
    position: suggestion.position,
    timestamp: Date.now(),
    action
  };
  
  // Update local popularity metrics
  this.updatePopularityScore(suggestion);
  
  // Queue for server sync if configured
  if (this.options.analyticsSync) {
    this.analyticsQueue.push(analytics);
    this.scheduleAnalyticsSync();
  }
}
```

## Accessibility Implementation

- ARIA live regions for screen reader announcements of suggestion counts
- Role="combobox" with aria-expanded, aria-activedescendant attributes
- Keyboard focus trapping within suggestion list
- High contrast visual indicators for keyboard navigation
</info added on 2025-05-26T07:48:23.291Z>

## 4. Create Breadcrumb and Mobile-Optimized Navigation [done]
### Dependencies: None
### Description: Implement intuitive navigation system with breadcrumbs and mobile-optimized menus with gesture support.
### Details:
1. Design breadcrumb component showing content hierarchy
2. Implement breadcrumb state management based on navigation path
3. Create mobile-optimized menu component with hamburger icon
4. Implement swipe gestures for navigation (swipe right for menu, swipe left to close)
5. Add smooth animations for menu transitions
6. Ensure menu is accessible via keyboard and screen readers
7. Implement collapsible sections in the navigation menu
8. Create context-aware navigation that highlights current section
9. Test navigation on various mobile devices and screen sizes
10. Ensure navigation elements have appropriate touch target sizes (minimum 44x44px)
11. Implement navigation history management with browser back/forward support

<info added on 2025-05-26T07:35:42.140Z>
## Mobile Navigation Implementation Details

### Gesture Support Implementation
- Use `react-swipeable` or `@use-gesture/react` for swipe detection
- Implement gesture handlers:
```tsx
const handlers = useSwipeable({
  onSwipedRight: () => setMenuOpen(true),
  onSwipedLeft: () => setMenuOpen(false),
  trackMouse: true,
  preventScrollOnSwipe: true,
  delta: 10
});
```

### Animation Recommendations
- Utilize Framer Motion for smooth transitions:
```tsx
<motion.div
  initial={{ x: "-100%" }}
  animate={{ x: isOpen ? "0%" : "-100%" }}
  transition={{ type: "spring", stiffness: 300, damping: 30 }}
  className="mobile-nav-container"
>
  {/* Menu content */}
</motion.div>
```

### Header Integration
- Create a context provider for navigation state management
- Use `useMediaQuery` hook to conditionally render mobile/desktop navigation
- Implement focus trap for accessibility when mobile menu is open

### Performance Considerations
- Lazy load mobile navigation components
- Use `transform` instead of position properties for animations
- Implement passive event listeners for touch events
- Consider using `will-change` CSS property for optimized rendering

### Testing Strategy
- Create Storybook stories with different viewport sizes
- Implement Playwright tests for gesture interactions
- Test with VoiceOver and TalkBack for accessibility verification
</info added on 2025-05-26T07:35:42.140Z>

<info added on 2025-05-26T07:52:28.495Z>
## Breadcrumb and Navigation Implementation Details

### Breadcrumb Component Architecture
- Implemented using a recursive path parsing algorithm:
```tsx
const generateBreadcrumbItems = (path: string): BreadcrumbItem[] => {
  const segments = path.split('/').filter(Boolean);
  return segments.map((segment, index) => ({
    label: formatBreadcrumbLabel(segment),
    href: `/${segments.slice(0, index + 1).join('/')}`,
    current: index === segments.length - 1
  }));
};
```
- Collapsible design for long paths using ellipsis component:
```tsx
{breadcrumbs.length > 4 && (
  <BreadcrumbEllipsis 
    items={breadcrumbs.slice(1, breadcrumbs.length - 2)} 
    aria-label="Hidden breadcrumb items" 
  />
)}
```

### Mobile Navigation State Management
- Implemented using React Context for global state access:
```tsx
export const NavigationContext = createContext<{
  isOpen: boolean;
  setIsOpen: (value: boolean) => void;
  toggleMenu: () => void;
}>({
  isOpen: false,
  setIsOpen: () => {},
  toggleMenu: () => {},
});
```
- Integrated with browser history API for proper back button handling:
```tsx
useEffect(() => {
  const handlePopState = () => {
    if (isOpen) setIsOpen(false);
  };
  window.addEventListener('popstate', handlePopState);
  return () => window.removeEventListener('popstate', handlePopState);
}, [isOpen, setIsOpen]);
```

### Accessibility Enhancements
- Implemented keyboard navigation with arrow key support:
```tsx
const handleKeyDown = (e: React.KeyboardEvent) => {
  if (e.key === 'ArrowDown') {
    e.preventDefault();
    const nextFocusableElement = findNextFocusableElement();
    nextFocusableElement?.focus();
  }
  // Additional key handlers...
};
```
- Screen reader announcements for navigation state changes:
```tsx
<VisuallyHidden>
  <div role="status" aria-live="polite">
    {isOpen ? 'Navigation menu opened' : 'Navigation menu closed'}
  </div>
</VisuallyHidden>
```

### Performance Optimizations
- Implemented intersection observer for lazy-loading navigation sections:
```tsx
const [visibleSections, setVisibleSections] = useState<string[]>([]);
useEffect(() => {
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        setVisibleSections(prev => [...prev, entry.target.id]);
      }
    });
  }, { threshold: 0.1 });
  
  document.querySelectorAll('.nav-section').forEach(section => {
    observer.observe(section);
  });
  
  return () => observer.disconnect();
}, []);
```
- Optimized re-renders using React.memo and useMemo for navigation items
</info added on 2025-05-26T07:52:28.495Z>

## 5. Implement Bookmarks and Recently Viewed Content [done]
### Dependencies: 3.1, 3.4
### Description: Create a system for bookmarking content and tracking recently viewed items using local storage.
### Details:
1. Design UI components for bookmarks and recently viewed content
2. Implement bookmark toggle functionality for all content types
3. Create local storage management for saving bookmarks
4. Implement recently viewed content tracking that saves last 10-20 items
5. Add bookmark categories or tags for organization
6. Create a bookmarks management page for viewing and removing bookmarks
7. Implement export/import functionality for bookmarks
8. Add recently viewed section to homepage or navigation
9. Ensure bookmarks sync across tabs using localStorage events
10. Implement clear history functionality
11. Test storage limits and implement fallback behavior when local storage is full
12. Add visual indicators for bookmarked content throughout the application

