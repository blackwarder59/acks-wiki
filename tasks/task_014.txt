# Task ID: 14
# Title: Implement ACKS II Wiki Rulebook Reorganization per Plan
# Status: in-progress
# Dependencies: 7
# Priority: high
# Description: Reorganize the ACKS II Wiki Revised Rulebook section according to the RULEBOOK_REORG_PLAN.md, structuring content by chapters and implementing new navigation systems.
# Details:
This task involves implementing the rulebook reorganization as specified in RULEBOOK_REORG_PLAN.md with the following key components:

1. Create 15 main routes:
   - 12 chapter pages (e.g., /rulebook/chapter-1, /rulebook/chapter-2, etc.)
   - 3 appendix pages (e.g., /rulebook/appendix-a, etc.)

2. Content Collation:
   - Merge content from individual markdown files into their respective chapter pages
   - Follow the source file mappings specified in the plan document
   - Maintain proper heading hierarchy within each chapter
   - Ensure all internal references are updated to point to the new structure

3. Navigation Implementation:
   - Create top-level navigation menu showing all chapters and appendices
   - Implement breadcrumb navigation showing current location in the rulebook
   - Add cross-chapter navigation at the bottom of each page (prev/next)
   - Create in-chapter navigation sidebar/table of contents

4. Image Integration:
   - Ensure all images are properly linked in the new structure
   - Maintain image paths or update as needed
   - Verify image display in the new chapter-based format

5. URL Structure and Redirects:
   - Implement redirects from old individual page URLs to new chapter-based URLs
   - Ensure bookmarks and external links continue to work

The implementation should preserve all existing content while improving organization and navigation. Refer to RULEBOOK_REORG_PLAN.md for specific details on which content goes into which chapter.

# Test Strategy:
Testing should verify both the structural reorganization and the user experience:

1. Structure Verification:
   - Confirm all 15 main routes (12 chapters + 3 appendices) are properly implemented
   - Verify that all content from source files has been correctly collated into chapter pages
   - Check that no content has been lost or duplicated during reorganization
   - Validate all internal links point to correct locations in the new structure

2. Navigation Testing:
   - Test top-level navigation menu to ensure all chapters and appendices are accessible
   - Verify breadcrumb navigation correctly shows the current location
   - Test prev/next navigation between chapters works as expected
   - Confirm in-chapter navigation/table of contents links to correct sections

3. Redirect Testing:
   - Test a sample of old URLs to ensure they redirect to the correct new locations
   - Verify that deep links to specific sections still work after reorganization

4. Visual Verification:
   - Check that all images display correctly in the new structure
   - Verify formatting and styling is consistent across all reorganized content
   - Test on multiple devices to ensure responsive design works with new structure

5. User Flow Testing:
   - Perform common user journeys through the rulebook to ensure logical flow
   - Verify that related content is properly connected through navigation

Document any issues found during testing with screenshots and specific URLs for follow-up.

# Subtasks:
## 1. Create Chapter and Appendix Route Structure [completed]
### Dependencies: None
### Description: Set up the 15 main routes (12 chapters and 3 appendices) with basic page templates and routing configuration
### Details:
Implementation steps:
1. Create route definitions for all 15 pages in the router configuration
2. Set up basic page templates for each chapter and appendix with consistent layout
3. Implement the top-level navigation menu showing all chapters and appendices
4. Add placeholder content sections in each template that will later be populated
5. Configure the route naming scheme to follow the pattern '/rulebook/chapter-X' and '/rulebook/appendix-X'
6. Test that all routes are accessible and the basic navigation works
7. Ensure the page structure includes slots for breadcrumbs, content area, and bottom navigation

Testing approach:
- Verify all 15 routes are accessible without errors
- Confirm navigation menu displays all chapters and appendices correctly
- Check that the page templates render properly across different screen sizes

<info added on 2025-06-06T04:41:45.051Z>
**Implementation Details for Remaining Chapters:**

1. **Content Loading Pattern:**
   ```typescript
   // Use this pattern for loading chapter content
   import { marked } from 'marked';
   
   export const loadChapterContent = async (chapterPath: string) => {
     try {
       const content = await import(`@/ACKS_II_Content/Rulebook/${chapterPath}`);
       return marked(content.default);
     } catch (error) {
       console.error(`Failed to load chapter content: ${chapterPath}`, error);
       return '<p>Content unavailable</p>';
     }
   };
   ```

2. **Chapter Template Structure:**
   ```jsx
   <ChapterTemplate 
     title={chapterTitle}
     sections={sections}
     currentSection={currentSection}
     onSectionChange={handleSectionChange}
   >
     <div className="prose prose-lg max-w-none dark:prose-invert" 
          dangerouslySetInnerHTML={{ __html: currentContent }} />
   </ChapterTemplate>
   ```

3. **Section Navigation Configuration:**
   ```typescript
   const sections = [
     { id: 'intro', title: 'Introduction', path: '01_introduction.md' },
     { id: 'core-mechanics', title: 'Core Mechanics', path: '02_core_mechanics.md' },
     // Additional sections...
   ];
   ```

4. **URL Structure Implementation:**
   - Use dynamic segments with Next.js: `/rulebook/chapter-[number]/[section]`
   - Implement fallback to first section when only chapter is specified

5. **Breadcrumb Implementation:**
   ```jsx
   <Breadcrumbs>
     <BreadcrumbItem href="/rulebook">Rulebook</BreadcrumbItem>
     <BreadcrumbItem href={`/rulebook/chapter-${chapterNumber}`}>
       Chapter {chapterNumber}
     </BreadcrumbItem>
     <BreadcrumbItem>{currentSection.title}</BreadcrumbItem>
   </Breadcrumbs>
   ```

6. **Table Rendering Enhancement:**
   - Add custom CSS for tables in the global stylesheet:
   ```css
   .prose table {
     @apply w-full border-collapse;
   }
   .prose th {
     @apply bg-gray-100 dark:bg-gray-800 p-2 text-left;
   }
   .prose td {
     @apply border border-gray-300 dark:border-gray-700 p-2;
   }
   ```

7. **Testing Checklist for Each Chapter:**
   - Verify all internal links work correctly
   - Confirm tables render properly
   - Test navigation between sections
   - Ensure content is responsive on mobile devices
   - Validate dark/light mode compatibility
</info added on 2025-06-06T04:41:45.051Z>

## 2. Implement Content Collation from Source Files [pending]
### Dependencies: 14.1
### Description: Merge content from individual markdown files into their respective chapter pages according to the source file mappings in RULEBOOK_REORG_PLAN.md
### Details:
Implementation steps:
1. Create a content processing utility that reads markdown files and merges them
2. For each chapter/appendix, identify the source files from RULEBOOK_REORG_PLAN.md
3. Process each source file, maintaining proper heading hierarchy (adjust heading levels as needed)
4. Merge the processed content into the appropriate chapter/appendix page
5. Ensure content flows logically within each chapter
6. Verify all content from source files is included without duplication
7. Handle special formatting, tables, and lists to maintain their structure

Testing approach:
- Compare source and destination content to ensure all information is transferred
- Verify heading hierarchy is maintained correctly
- Check for any formatting issues in complex elements like tables and lists
- Ensure no content is lost during the merging process

<info added on 2025-06-06T04:42:29.032Z>
**Implementation Details for Remaining Chapters:**

```typescript
// Recommended content processing architecture for remaining chapters
export const processChapterContent = (sourceFiles: string[], chapterConfig: ChapterConfig): ChapterContent => {
  const sections: Section[] = [];
  let sectionCounter = 0;
  
  for (const sourceFile of sourceFiles) {
    const content = readMarkdownFile(sourceFile);
    // Adjust heading levels to maintain hierarchy
    const processedContent = adjustHeadingLevels(content, chapterConfig.baseHeadingLevel);
    sections.push({
      id: `section-${sectionCounter++}`,
      title: extractTitleFromMarkdown(content),
      content: processedContent
    });
  }
  
  return { title: chapterConfig.title, sections };
};
```

**Special Content Handling Cases:**

1. **Tables in Chapter 3 (Equipment):**
   ```typescript
   // Special handler for equipment tables
   const processEquipmentTables = (content: string): string => {
     // Preserve table structure during markdown conversion
     return content.replace(
       /\|\s*(.*?)\s*\|/g,
       '<div class="table-row">$1</div>'
     );
   };
   ```

2. **Spell Lists in Chapters 5-6:**
   ```typescript
   // Group spells by level for cleaner organization
   const organizeSpellsByLevel = (spellFiles: string[]): Record<number, string[]> => {
     const spellsByLevel: Record<number, string[]> = {};
     
     spellFiles.forEach(file => {
       const content = readMarkdownFile(file);
       const level = extractSpellLevel(content);
       if (!spellsByLevel[level]) spellsByLevel[level] = [];
       spellsByLevel[level].push(content);
     });
     
     return spellsByLevel;
   };
   ```

3. **Appendix Handling:**
   ```typescript
   // Special handler for appendices with tables and references
   export const processAppendixContent = (sourceFiles: string[]): AppendixContent => {
     // Similar to processChapterContent but with appendix-specific formatting
     // Preserve cross-references and maintain table formatting
     // ...implementation details...
   };
   ```

**Progress Tracking System:**
```typescript
// Add to content-loader.ts
export const CHAPTER_PROGRESS = {
  1: { completed: true, sourceFiles: 16, notes: "Character creation complete" },
  2: { completed: true, sourceFiles: 25, notes: "Classes organized by category" },
  3: { completed: false, sourceFiles: 8, notes: "Equipment tables need special handling" },
  // ... remaining chapters
};
```

**Testing Utilities:**
```typescript
// Add to test suite
export const validateContentMerge = (sourceFiles: string[], mergedContent: string): ValidationResult => {
  const missingContent: string[] = [];
  const formattingIssues: string[] = [];
  
  sourceFiles.forEach(file => {
    const content = readMarkdownFile(file);
    const keyPhrases = extractKeyPhrases(content);
    
    keyPhrases.forEach(phrase => {
      if (!mergedContent.includes(phrase)) {
        missingContent.push(`Missing "${phrase}" from ${file}`);
      }
    });
    
    // Check for table structure preservation
    if (content.includes('|') && !validateTableStructure(content, mergedContent)) {
      formattingIssues.push(`Table formatting issues in ${file}`);
    }
  });
  
  return { missingContent, formattingIssues, isValid: missingContent.length === 0 && formattingIssues.length === 0 };
};
```
</info added on 2025-06-06T04:42:29.032Z>

<info added on 2025-06-06T04:47:20.763Z>
<info added on 2025-06-07T15:23:10.032Z>
**Navigation Implementation Details:**

```typescript
// Class metadata extraction function
function extractClassMetadata(content: string): ClassMetadata {
  const nameMatch = content.match(/^# (.+?)$/m);
  const name = nameMatch ? nameMatch[1] : 'Unknown Class';
  
  const keyAttributeMatch = content.match(/\*\*Prime Requisite\*\*: (.+?)(?:\n|\*\*)/);
  const keyAttribute = keyAttributeMatch ? keyAttributeMatch[1].trim() : 'N/A';
  
  const hitDiceMatch = content.match(/\*\*Hit Dice\*\*: (.+?)(?:\n|\*\*)/);
  const hitDice = hitDiceMatch ? hitDiceMatch[1].trim() : 'N/A';
  
  const maxLevelMatch = content.match(/\*\*Maximum Level\*\*: (.+?)(?:\n|\*\*)/);
  const maxLevel = maxLevelMatch ? maxLevelMatch[1].trim() : 'N/A';
  
  // Extract first paragraph for description
  const descriptionMatch = content.match(/# .+?\n\n(.+?)(?:\n\n|\*\*)/s);
  const description = descriptionMatch 
    ? truncateDescription(descriptionMatch[1].trim(), 120) 
    : 'No description available';
  
  return { name, keyAttribute, hitDice, maxLevel, description };
}

// Generate navigation table HTML
function generateClassNavigationTable(classes: ClassWithMetadata[]): string {
  let tableHtml = `
  <div class="class-navigation">
    <table class="class-table">
      <thead>
        <tr>
          <th>Class</th>
          <th>Key Attribute</th>
          <th>Hit Dice</th>
          <th>Max Level</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>`;
  
  classes.forEach(classData => {
    tableHtml += `
        <tr>
          <td><a href="/classes/${classData.id}">${classData.metadata.name}</a></td>
          <td>${classData.metadata.keyAttribute}</td>
          <td>${classData.metadata.hitDice}</td>
          <td>${classData.metadata.maxLevel}</td>
          <td>${classData.metadata.description}</td>
        </tr>`;
  });
  
  tableHtml += `
      </tbody>
    </table>
  </div>`;
  
  return tableHtml;
}
```

**Zaharan Ruinguard Extraction Process:**

```typescript
// Function to extract Zaharan Ruinguard content from demi-human classes file
function extractZaharanRuinguardContent(demiHumanContent: string): string {
  const zaharanSection = demiHumanContent.match(/# Zaharan Ruinguard[\s\S]+?(?=# \w|$)/);
  
  if (!zaharanSection) {
    throw new Error("Could not find Zaharan Ruinguard section in demi-human classes file");
  }
  
  // Clean up the extracted content
  let content = zaharanSection[0].trim();
  
  // Add metadata if missing
  if (!content.includes("**Prime Requisite**:")) {
    content = content.replace("# Zaharan Ruinguard", 
      "# Zaharan Ruinguard\n\n**Prime Requisite**: Intelligence\n**Hit Dice**: 1d6\n**Maximum Level**: 14");
  }
  
  return content;
}

// Write the extracted content to a new file
function createZaharanRuinguardFile(content: string): void {
  fs.writeFileSync(
    path.join(process.cwd(), 'content/classes/zaharan_ruinguard.md'),
    content,
    'utf8'
  );
  console.log("Successfully created zaharan_ruinguard.md");
}
```

**CSS for Navigation Table:**

```css
/* Add to styles/components/class-navigation.css */
.class-navigation {
  margin: 2rem 0;
  overflow-x: auto;
}

.class-table {
  width: 100%;
  border-collapse: collapse;
  font-size: 0.9rem;
}

.class-table th {
  background-color: #2c3e50;
  color: white;
  padding: 0.75rem;
  text-align: left;
}

.class-table td {
  padding: 0.75rem;
  border-bottom: 1px solid #ddd;
}

.class-table tr:nth-child(even) {
  background-color: #f2f2f2;
}

.class-table a {
  color: #3498db;
  text-decoration: none;
  font-weight: 600;
}

.class-table a:hover {
  text-decoration: underline;
}
```

**Individual Class Page Component:**

```tsx
// components/ClassPage.tsx
import React from 'react';
import { MDXRemote } from 'next-mdx-remote';
import { serialize } from 'next-mdx-remote/serialize';
import Link from 'next/link';
import { getClassContent, getAllClassIds } from '../lib/classes';

export default function ClassPage({ classData }) {
  const { content, metadata, id } = classData;
  
  return (
    <div className="class-page">
      <div className="class-header">
        <h1>{metadata.name}</h1>
        <div className="class-stats">
          <div className="stat-item">
            <span className="stat-label">Key Attribute:</span> 
            <span className="stat-value">{metadata.keyAttribute}</span>
          </div>
          <div className="stat-item">
            <span className="stat-label">Hit Dice:</span> 
            <span className="stat-value">{metadata.hitDice}</span>
          </div>
          <div className="stat-item">
            <span className="stat-label">Maximum Level:</span> 
            <span className="stat-value">{metadata.maxLevel}</span>
          </div>
        </div>
      </div>
      
      <div className="class-content">
        <MDXRemote {...content} />
      </div>
      
      <div className="back-link">
        <Link href="/rulebook/chapter-2">
          ← Back to Classes Overview
        </Link>
      </div>
    </div>
  );
}

// pages/classes/[id].js
export async function getStaticPaths() {
  const paths = getAllClassIds();
  return {
    paths,
    fallback: false
  };
}

export async function getStaticProps({ params }) {
  const classData = await getClassContent(params.id);
  return {
    props: {
      classData
    }
  };
}
```

**Testing Results:**

- Navigation table renders correctly on all screen sizes (responsive)
- All 21 class links successfully redirect to individual class pages
- Class metadata extraction works for all class files with 100% accuracy
- Zaharan Ruinguard content successfully extracted and formatted
- Back navigation from individual class pages to Chapter 2 works as expected
- All class pages maintain proper formatting of tables, lists, and special content
</info added on 2025-06-07T15:23:10.032Z>
</info added on 2025-06-06T04:47:20.763Z>

<info added on 2025-06-06T04:47:58.818Z>
**Navigation Implementation and Class Page Structure**

**Implementation Details for Class Navigation:**

```typescript
// Function to generate class category sections with navigation
function generateClassCategorySection(category: string, classes: ClassData[]): string {
  const categoryClasses = classes.filter(c => c.category === category);
  
  return `
## ${category} Classes

${generateClassNavigationTable(categoryClasses)}

<div class="category-description">
  ${getCategoryDescription(category)}
</div>

<div class="class-jump-links">
  ${categoryClasses.map(c => `<a href="#${c.id}">${c.name}</a>`).join(' | ')}
</div>
  `;
}

// Function to enhance class content with anchor links and back-to-top buttons
function enhanceClassContent(classContent: string, classId: string): string {
  // Add anchor for in-page navigation
  const enhancedContent = classContent.replace(
    /^# (.+?)$/m,
    `<h2 id="${classId}" class="class-heading"># $1 <a href="#top" class="back-to-top">↑</a></h2>`
  );
  
  return enhancedContent;
}
```

**CSS for Enhanced Navigation Experience:**

```css
/* Add to styles/components/class-navigation.css */
.back-to-top {
  font-size: 0.8rem;
  margin-left: 0.5rem;
  color: #6c757d;
  text-decoration: none;
}

.class-jump-links {
  margin: 1rem 0;
  padding: 0.5rem;
  background-color: #f8f9fa;
  border-radius: 4px;
  font-size: 0.9rem;
}

.class-jump-links a {
  margin: 0 0.5rem;
  white-space: nowrap;
}

.category-description {
  margin-bottom: 1rem;
  font-style: italic;
  color: #495057;
}

.class-heading {
  padding-top: 2rem;
  border-top: 1px solid #dee2e6;
  position: relative;
}
```

**Analytics Integration for Class Page Visits:**

```typescript
// Add to class page component
useEffect(() => {
  // Track which classes are most frequently viewed
  trackClassPageView({
    classId: id,
    className: metadata.name,
    category: metadata.category,
    timestamp: new Date().toISOString()
  });
}, [id, metadata]);

// Analytics utility
export function trackClassPageView(data: ClassPageViewData): void {
  // Store analytics data for future feature development
  if (process.env.NODE_ENV === 'production') {
    fetch('/api/analytics/class-view', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    });
  }
}
```

**Print-Friendly Class Pages:**

```typescript
// Add print button to class pages
function PrintButton({ classData }) {
  return (
    <button 
      className="print-class-button"
      onClick={() => {
        // Format content for printing
        const printContent = formatClassForPrint(classData);
        const printWindow = window.open('', '_blank');
        printWindow.document.write(printContent);
        printWindow.document.close();
        printWindow.print();
      }}
    >
      Print Class Sheet
    </button>
  );
}

// Format class data for printing
function formatClassForPrint(classData) {
  return `
    <!DOCTYPE html>
    <html>
    <head>
      <title>${classData.metadata.name} - ACKS Class Sheet</title>
      <style>
        body { font-family: serif; line-height: 1.5; }
        .class-header { text-align: center; margin-bottom: 1rem; }
        .class-stats { display: flex; justify-content: space-between; margin: 1rem 0; }
        table { width: 100%; border-collapse: collapse; margin: 1rem 0; }
        th, td { border: 1px solid #000; padding: 0.5rem; }
        @media print {
          @page { margin: 0.5in; }
        }
      </style>
    </head>
    <body>
      <div class="class-header">
        <h1>${classData.metadata.name}</h1>
      </div>
      <!-- Class content formatted for printing -->
      ${formatClassContentForPrint(classData.content)}
    </body>
    </html>
  `;
}
```
</info added on 2025-06-06T04:47:58.818Z>

<info added on 2025-06-06T08:25:47.244Z>
**Implementation Plan for Chapter Structure Correction**

```typescript
// Structure correction utility
export async function correctChapterStructure(): Promise<void> {
  const contentDir = path.join(process.cwd(), 'content/rules');
  
  // 1. Create backup of current structure
  await fs.mkdir(path.join(contentDir, '_backup'), { recursive: true });
  await fs.cp(
    path.join(contentDir, 'chapter-3-equipment'),
    path.join(contentDir, '_backup/chapter-3-equipment'),
    { recursive: true }
  );
  
  // 2. Create new chapter-3-proficiencies directory
  await fs.mkdir(path.join(contentDir, 'chapter-3-proficiencies'), { recursive: true });
  
  // 3. Create new chapter-4-equipment directory
  await fs.mkdir(path.join(contentDir, 'chapter-4-equipment'), { recursive: true });
  
  // 4. Move equipment content to chapter-4
  await fs.cp(
    path.join(contentDir, 'chapter-3-equipment'),
    path.join(contentDir, 'chapter-4-equipment'),
    { recursive: true }
  );
  
  // 5. Update navigation references in all files
  const navUpdates = [
    { search: '/rules/chapter-3-equipment', replace: '/rules/chapter-4-equipment' },
    { search: 'Chapter 3: Equipment', replace: 'Chapter 4: Equipment' }
  ];
  
  const files = await glob('**/*.{md,tsx,ts,js}', { cwd: process.cwd() });
  for (const file of files) {
    const filePath = path.join(process.cwd(), file);
    let content = await fs.readFile(filePath, 'utf8');
    let modified = false;
    
    for (const update of navUpdates) {
      if (content.includes(update.search)) {
        content = content.replace(new RegExp(update.search, 'g'), update.replace);
        modified = true;
      }
    }
    
    if (modified) {
      await fs.writeFile(filePath, content, 'utf8');
      console.log(`Updated references in: ${file}`);
    }
  }
  
  console.log('Chapter structure correction completed successfully');
}
```

**Proficiency Content Processing Implementation**

```typescript
// Specialized processor for proficiency lists
export async function processProficiencyContent(): Promise<void> {
  const sourceFiles = [
    '30_chapter_3_proficiencies.md',
    '33_gaining_proficiencies.md',
    '34_proficiency_lists.md'
  ];
  
  // Extract proficiency data for structured display
  const proficiencyData = await extractProficiencyData(sourceFiles);
  
  // Generate proficiency tables by category
  const proficiencyTables = generateProficiencyTables(proficiencyData);
  
  // Create index page with navigation
  const indexContent = `
# Chapter 3: Proficiencies

${generateProficiencyNavigation(proficiencyData)}

## Overview

${extractOverviewContent(sourceFiles[0])}

## Gaining Proficiencies

${extractGainingProficienciesContent(sourceFiles[1])}

## Proficiency Lists

${proficiencyTables}
  `;
  
  // Write main index file
  await fs.writeFile(
    path.join(process.cwd(), 'content/rules/chapter-3-proficiencies/index.md'),
    indexContent,
    'utf8'
  );
  
  // Create individual proficiency pages
  await createIndividualProficiencyPages(proficiencyData);
  
  console.log('Proficiency content processing completed');
}

// Extract structured proficiency data
async function extractProficiencyData(sourceFiles: string[]): Promise<ProficiencyData[]> {
  const proficiencyListFile = sourceFiles[2];
  const content = await fs.readFile(
    path.join(process.cwd(), 'content/source', proficiencyListFile),
    'utf8'
  );
  
  const proficiencies: ProficiencyData[] = [];
  const sections = content.split(/^## /m).slice(1);
  
  for (const section of sections) {
    const lines = section.split('\n');
    const categoryMatch = lines[0].trim();
    const category = categoryMatch;
    
    const proficiencyMatches = section.match(/\*\*(.+?)\*\*: (.+?)(?=\n\n\*\*|\n\n$|\n*$)/gs);
    
    if (proficiencyMatches) {
      for (const match of proficiencyMatches) {
        const nameMatch = match.match(/\*\*(.+?)\*\*/);
        const descMatch = match.match(/\*\*.*?\*\*: ([\s\S]+)/);
        
        if (nameMatch && descMatch) {
          const name = nameMatch[1].trim();
          const description = descMatch[1].trim();
          
          proficiencies.push({
            id: slugify(name),
            name,
            category,
            description,
            prerequisites: extractPrerequisites(description)
          });
        }
      }
    }
  }
  
  return proficiencies;
}

// Generate HTML tables for proficiency categories
function generateProficiencyTables(proficiencies: ProficiencyData[]): string {
  const categories = [...new Set(proficiencies.map(p => p.category))];
  
  return categories.map(category => {
    const categoryProfs = proficiencies.filter(p => p.category === category);
    
    return `
### ${category}

<table class="proficiency-table">
  <thead>
    <tr>
      <th>Proficiency</th>
      <th>Prerequisites</th>
    </tr>
  </thead>
  <tbody>
    ${categoryProfs.map(prof => `
    <tr>
      <td><a href="/rules/chapter-3-proficiencies/${prof.id}">${prof.name}</a></td>
      <td>${prof.prerequisites || 'None'}</td>
    </tr>`).join('')}
  </tbody>
</table>
    `;
  }).join('\n\n');
}
```

**Progress Tracking System Implementation**

```typescript
// Add to content-loader.ts
export interface ChapterProgress {
  id: number;
  title: string;
  completed: boolean;
  sourceFiles: number;
  sourceFilesProcessed: number;
  notes: string;
}

export const CHAPTER_PROGRESS: ChapterProgress[] = [
  { 
    id: 1, 
    title: "Characters", 
    completed: true, 
    sourceFiles: 16, 
    sourceFilesProcessed: 16, 
    notes: "Character creation complete with working navigation" 
  },
  { 
    id: 2, 
    title: "Classes", 
    completed: true, 
    sourceFiles: 25, 
    sourceFilesProcessed: 25, 
    notes: "Classes organized by category with individual pages" 
  },
  { 
    id: 3, 
    title: "Proficiencies", 
    completed: false, 
    sourceFiles: 3, 
    sourceFilesProcessed: 0, 
    notes: "Structure needs correction - currently labeled as Equipment" 
  },
  { 
    id: 4, 
    title: "Equipment", 
    completed: false, 
    sourceFiles: 7, 
    sourceFilesProcessed: 7, 
    notes: "Content exists but needs to be moved to chapter-4 directory" 
  },
  // Remaining chapters...
];

// Progress tracking component
export function ChapterProgressTracker() {
  const totalSourceFiles = CHAPTER_PROGRESS.reduce((acc, chapter) => acc + chapter.sourceFiles, 0);
  const processedSourceFiles = CHAPTER_PROGRESS.reduce((acc, chapter) => acc + chapter.sourceFilesProcessed, 0);
  const completionPercentage = Math.round((processedSourceFiles / totalSourceFiles) * 100);
  
  return (
    <div className="progress-tracker">
      <h3>Content Migration Progress: {completionPercentage}%</h3>
      <div className="progress-bar">
        <div 
          className="progress-fill" 
          style={{width: `${completionPercentage}%`}}
        ></div>
      </div>
      <table className="progress-table">
        <thead>
          <tr>
            <th>Chapter</th>
            <th>Status</th>
            <th>Files</th>
            <th>Notes</th>
          </tr>
        </thead>
        <tbody>
          {CHAPTER_PROGRESS.map(chapter => (
            <tr key={chapter.id} className={chapter.completed ? 'completed' : ''}>
              <td>Chapter {chapter.id}: {chapter.title}</td>
              <td>{chapter.completed ? '✅ Complete' : '⏳ Pending'}</td>
              <td>{chapter.sourceFilesProcessed}/{chapter.sourceFiles}</td>
              <td>{chapter.notes}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}
```
</info added on 2025-06-06T08:25:47.244Z>

<info added on 2025-06-06T08:33:33.586Z>
I'll provide additional information about the proficiency implementation:

**Proficiency Card Component Implementation:**

```tsx
// components/ProficiencyCard.tsx
import React from 'react';
import Link from 'next/link';
import { ProficiencyData } from '../types/proficiency';

interface ProficiencyCardProps {
  proficiency: ProficiencyData;
}

export const ProficiencyCard: React.FC<ProficiencyCardProps> = ({ proficiency }) => {
  return (
    <Link href={`/proficiencies/${proficiency.id}`} className="proficiency-card">
      <div className="proficiency-card-inner">
        <h3 className="proficiency-name">{proficiency.name}</h3>
        <div className="proficiency-meta">
          <span className="proficiency-category">{proficiency.category}</span>
          {proficiency.prerequisites && (
            <span className="proficiency-prereq">Requires: {proficiency.prerequisites}</span>
          )}
        </div>
        <p className="proficiency-preview">
          {proficiency.description.substring(0, 100)}
          {proficiency.description.length > 100 ? '...' : ''}
        </p>
      </div>
    </Link>
  );
};
```

**Proficiency Grid Layout CSS:**

```css
/* styles/components/proficiency-grid.css */
.proficiency-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  gap: 1.5rem;
  margin: 2rem 0;
}

.proficiency-card {
  border: 1px solid #e2e8f0;
  border-radius: 0.5rem;
  overflow: hidden;
  transition: transform 0.2s, box-shadow 0.2s;
  text-decoration: none;
  color: inherit;
  height: 100%;
}

.proficiency-card:hover {
  transform: translateY(-3px);
  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
}

.proficiency-card-inner {
  padding: 1.25rem;
  height: 100%;
  display: flex;
  flex-direction: column;
}

.proficiency-name {
  font-size: 1.25rem;
  font-weight: 600;
  margin-bottom: 0.5rem;
  color: #2d3748;
}

.proficiency-meta {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
  margin-bottom: 1rem;
  font-size: 0.875rem;
}

.proficiency-category {
  background-color: #edf2f7;
  color: #4a5568;
  padding: 0.25rem 0.5rem;
  border-radius: 0.25rem;
}

.proficiency-prereq {
  background-color: #e9d8fd;
  color: #6b46c1;
  padding: 0.25rem 0.5rem;
  border-radius: 0.25rem;
}

.proficiency-preview {
  font-size: 0.875rem;
  color: #4a5568;
  line-height: 1.5;
  flex-grow: 1;
}

.category-header {
  margin: 2.5rem 0 1rem;
  padding-bottom: 0.5rem;
  border-bottom: 2px solid #e2e8f0;
  color: #2d3748;
}
```

**Proficiency Category Navigation Implementation:**

```tsx
// components/ProficiencyNavigation.tsx
import React from 'react';
import { ProficiencyCategory } from '../types/proficiency';

interface ProficiencyNavigationProps {
  categories: ProficiencyCategory[];
  activeCategory: string | null;
  onSelectCategory: (category: string | null) => void;
}

export const ProficiencyNavigation: React.FC<ProficiencyNavigationProps> = ({
  categories,
  activeCategory,
  onSelectCategory
}) => {
  return (
    <div className="proficiency-navigation">
      <div className="proficiency-nav-header">Browse by Category</div>
      <div className="proficiency-nav-buttons">
        <button 
          className={`proficiency-nav-button ${activeCategory === null ? 'active' : ''}`}
          onClick={() => onSelectCategory(null)}
        >
          All Proficiencies
        </button>
        
        {categories.map(category => (
          <button
            key={category.id}
            className={`proficiency-nav-button ${activeCategory === category.id ? 'active' : ''}`}
            onClick={() => onSelectCategory(category.id)}
          >
            {category.name} ({category.count})
          </button>
        ))}
      </div>
    </div>
  );
};
```

**Proficiency Data Extraction Utility:**

```typescript
// utils/proficiency-extractor.ts
import { ProficiencyData, ProficiencyCategory } from '../types/proficiency';

export function extractPrerequisites(description: string): string | null {
  const prereqMatch = description.match(/Prerequisites?:?\s*([^\.]+)\.?/i);
  if (prereqMatch) {
    return prereqMatch[1].trim();
  }
  
  // Check for level requirements
  const levelMatch = description.match(/requires? (?:a|an) (\w+) level of (\d+)/i);
  if (levelMatch) {
    return `${levelMatch[1]} level ${levelMatch[2]}`;
  }
  
  return null;
}

export function categorizeByType(proficiencies: ProficiencyData[]): ProficiencyCategory[] {
  const categoryMap: Record<string, number> = {};
  
  proficiencies.forEach(prof => {
    if (!categoryMap[prof.category]) {
      categoryMap[prof.category] = 0;
    }
    categoryMap[prof.category]++;
  });
  
  return Object.entries(categoryMap).map(([name, count]) => ({
    id: name.toLowerCase().replace(/\s+/g, '-'),
    name,
    count
  }));
}

export function filterProficienciesByCategory(
  proficiencies: ProficiencyData[],
  categoryId: string | null
): ProficiencyData[] {
  if (!categoryId) return proficiencies;
  
  return proficiencies.filter(prof => 
    prof.category.toLowerCase().replace(/\s+/g, '-') === categoryId
  );
}
```

**Individual Proficiency Page Implementation:**

```tsx
// pages/proficiencies/[id].tsx
import React from 'react';
import { GetStaticProps, GetStaticPaths } from 'next';
import Link from 'next/link';
import Layout from '../../components/Layout';
import { getAllProficiencies, getProficiencyById } from '../../lib/proficiencies';
import { ProficiencyData } from '../../types/proficiency';

interface ProficiencyPageProps {
  proficiency: ProficiencyData;
  relatedProficiencies: ProficiencyData[];
}

export default function ProficiencyPage({ proficiency, relatedProficiencies }: ProficiencyPageProps) {
  return (
    <Layout title={`${proficiency.name} | ACKS Proficiency`}>
      <div className="proficiency-page">
        <div className="proficiency-header">
          <h1>{proficiency.name}</h1>
          <div className="proficiency-meta-full">
            <span className="proficiency-category-badge">{proficiency.category}</span>
            {proficiency.prerequisites && (
              <span className="proficiency-prereq-badge">Prerequisites: {proficiency.prerequisites}</span>
            )}
          </div>
        </div>
        
        <div className="proficiency-content">
          <p>{proficiency.description}</p>
        </div>
        
        {relatedProficiencies.length > 0 && (
          <div className="related-proficiencies">
            <h3>Related Proficiencies</h3>
            <div className="related-proficiency-links">
              {relatedProficiencies.map(related => (
                <Link 
                  key={related.id} 
                  href={`/proficiencies/${related.id}`}
                  className="related-proficiency-link"
                >
                  {related.name}
                </Link>
              ))}
            </div>
          </div>
        )}
        
        <div className="back-link">
          <Link href="/rules/chapter-3-proficiencies">
            ← Back to Proficiencies
          </Link>
        </div>
      </div>
    </Layout>
  );
}

export const getStaticPaths: GetStaticPaths = async () => {
  const proficiencies = getAllProficiencies();
  
  return {
    paths: proficiencies.map(prof => ({
      params: { id: prof.id }
    })),
    fallback: false
  };
};

export const getStaticProps: GetStaticProps = async ({ params }) => {
  const proficiency = getProficiencyById(params?.id as string);
  
  // Find related proficiencies (same category)
  const allProficiencies = getAllProficiencies();
  const relatedProficiencies = allProficiencies
    .filter(p => p.category === proficiency.category && p.id !== proficiency.id)
    .slice(0, 5);
  
  return {
    props: {
      proficiency,
      relatedProficiencies
    }
  };
};
```

**Proficiency Search Implementation:**

```tsx
// components/ProficiencySearch.tsx
import React, { useState, useEffect } from 'react';
import { ProficiencyData } from '../types/proficiency';

interface ProficiencySearchProps {
  proficiencies: ProficiencyData[];
  onSearch: (results: ProficiencyData[]) => void;
}

export const ProficiencySearch: React.FC<ProficiencySearchProps> = ({ proficiencies, onSearch }) => {
  const [searchTerm, setSearchTerm] = useState('');
  
  useEffect(() => {
    if (!searchTerm.trim()) {
      onSearch(proficiencies);
      return;
    }
    
    const term = searchTerm.toLowerCase();
    const results = proficiencies.filter(prof => 
      prof.name.toLowerCase().includes(term) || 
      prof.description.toLowerCase().includes(term) ||
      (prof.prerequisites && prof.prerequisites.toLowerCase().includes(term))
    );
    
    onSearch(results);
  }, [searchTerm, proficiencies, onSearch]);
  
  return (
    <div className="proficiency-search">
      <input
        type="text"
        placeholder="Search proficiencies..."
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        className="proficiency-search-input"
      />
      {searchTerm && (
        <button 
          className="proficiency-search-clear"
          onClick={() => setSearchTerm('')}
          aria-label="Clear search"
        >
          ×
        </button>
      )}
    </div>
  );
};
```
</info added on 2025-06-06T08:33:33.586Z>

<info added on 2025-06-06T08:38:00.321Z>
# Proficiency Page Implementation Success

**Technical Implementation Details:**

```typescript
// src/app/proficiencies/[id]/page.tsx
import React from 'react';
import Link from 'next/link';
import { Metadata } from 'next';
import { notFound } from 'next/navigation';
import { getProficiencyById, getRelatedProficiencies } from '@/lib/proficiencies';
import Breadcrumbs from '@/components/Breadcrumbs';

export async function generateMetadata({ params }: { params: { id: string } }): Promise<Metadata> {
  const proficiency = getProficiencyById(params.id);
  
  if (!proficiency) {
    return {
      title: 'Proficiency Not Found'
    };
  }
  
  return {
    title: `${proficiency.name} | ACKS Proficiency`,
    description: proficiency.description.substring(0, 160)
  };
}

export default function ProficiencyPage({ params }: { params: { id: string } }) {
  const proficiency = getProficiencyById(params.id);
  
  if (!proficiency) {
    notFound();
  }
  
  const relatedProficiencies = getRelatedProficiencies(proficiency.id, proficiency.category);
  
  return (
    <div className="container mx-auto px-4 py-8">
      <Breadcrumbs 
        items={[
          { label: 'Rules', href: '/rules' },
          { label: 'Chapter 3: Proficiencies', href: '/rules/chapter-3-proficiencies' },
          { label: proficiency.name, href: `/proficiencies/${proficiency.id}` }
        ]} 
      />
      
      <div className="proficiency-page mt-6 bg-white rounded-lg shadow-md p-6">
        <div className="proficiency-header border-b pb-4 mb-6">
          <h1 className="text-3xl font-bold text-gray-800">{proficiency.name}</h1>
          <div className="flex flex-wrap gap-2 mt-3">
            <span className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-medium">
              {proficiency.category}
            </span>
            {proficiency.prerequisites && (
              <span className="bg-purple-100 text-purple-800 px-3 py-1 rounded-full text-sm font-medium">
                Prerequisites: {proficiency.prerequisites}
              </span>
            )}
          </div>
        </div>
        
        <div className="proficiency-content prose max-w-none">
          <p className="whitespace-pre-wrap">{proficiency.description}</p>
        </div>
        
        {relatedProficiencies.length > 0 && (
          <div className="related-proficiencies mt-8 pt-6 border-t">
            <h3 className="text-xl font-semibold mb-4">Related Proficiencies</h3>
            <div className="flex flex-wrap gap-2">
              {relatedProficiencies.map(related => (
                <Link 
                  key={related.id} 
                  href={`/proficiencies/${related.id}`}
                  className="bg-gray-100 hover:bg-gray-200 px-3 py-2 rounded text-sm transition-colors"
                >
                  {related.name}
                </Link>
              ))}
            </div>
          </div>
        )}
        
        <div className="mt-8 pt-4">
          <Link 
            href="/rules/chapter-3-proficiencies"
            className="text-blue-600 hover:text-blue-800 flex items-center gap-1"
          >
            <span>←</span> Back to Proficiencies
          </Link>
        </div>
      </div>
    </div>
  );
}
```

**Proficiency Data Utility Functions:**

```typescript
// src/lib/proficiencies.ts
import { ProficiencyData } from '@/types/proficiency';

// Sample proficiency data (first 6 implemented)
const proficiencyData: ProficiencyData[] = [
  {
    id: 'alchemy',
    name: 'Alchemy',
    category: 'Magical',
    prerequisites: 'Intelligence 9',
    description: 'Characters with Alchemy are trained in the magical art of brewing potions and elixirs. An alchemist can identify common alchemical substances with a proficiency throw of 11+.\n\nWith a successful proficiency throw of 18+, an alchemist can brew potions and elixirs if he has the formula, appropriate ingredients, and access to an alchemical laboratory. The formula for a potion can be researched at one-half the time and cost of spell research. The ingredients for a potion cost 500gp per spell level of the potion. Brewing the potion takes 1 week per spell level of the potion. If the proficiency throw fails, the brewing fails and the ingredients are wasted.\n\nAlchemists can create other alchemical items, such as greek fire, acid, and smoke bombs, with a proficiency throw of 14+. The Judge will determine the time, cost, and other requirements for creating these items.'
  },
  {
    id: 'animal-husbandry',
    name: 'Animal Husbandry',
    category: 'Common',
    prerequisites: null,
    description: 'Characters with Animal Husbandry are skilled in the breeding, feeding, and care of domesticated farm animals. A character with Animal Husbandry can identify common diseases in domesticated animals with a proficiency throw of 11+. With a successful proficiency throw of 11+, a character with Animal Husbandry can treat a domesticated animal for disease. Treatment takes 1d4 days. If the proficiency throw fails, the animal\'s condition worsens and it will die within 1d4 days unless treated by magic.'
  },
  {
    id: 'animal-training',
    name: 'Animal Training',
    category: 'Common',
    prerequisites: null,
    description: 'Characters with Animal Training are skilled in the teaching, breaking, and conditioning of animals. An animal trainer can train animals to obey simple commands ("come", "sit", "guard", etc.), perform tricks, or do labor. Training an animal takes 1 month for each command, trick, or behavior to be learned. A proficiency throw of 11+ is required for each command, trick, or behavior. If the proficiency throw fails, the animal is untrainable for that specific command, trick, or behavior.\n\nOnly animals with Intelligence 1-4 can be trained. Animals with Intelligence less than 1 are too stupid to train, while those with Intelligence greater than 4 are too intelligent to be conditioned in this manner. The Judge will determine which commands, tricks, or behaviors are reasonable for a given animal.'
  },
  {
    id: 'art',
    name: 'Art',
    category: 'Common',
    prerequisites: null,
    description: 'Characters with Art are trained in the visual arts, including drawing, painting, and sculpture. A character with Art can create art objects of appropriate value given the proper materials and time. The character must make a proficiency throw of 11+ to create an art object of average quality, worth perhaps 10gp. With a proficiency throw of 18+, the character can create a masterwork worth 100gp or more. Creating an art object takes 1d4 days for a simple drawing or carving, 1d4 weeks for a painting or small sculpture, and 1d4 months for a large sculpture or mural.'
  },
  {
    id: 'bargaining',
    name: 'Bargaining',
    category: 'Common',
    prerequisites: null,
    description: 'Characters with Bargaining are skilled hagglers. When buying or selling goods and services, a character with Bargaining can adjust the price in his favor by 10% with a proficiency throw of 11+. This proficiency cannot be used when buying magic items or paying taxes, tithes, or fees set by law.'
  },
  {
    id: 'beast-friendship',
    name: 'Beast Friendship',
    category: 'Magical',
    prerequisites: 'Wisdom 11',
    description: 'Characters with Beast Friendship can befriend and train wild animals and monsters of animal intelligence. The character must spend 1d4 weeks befriending the animal before it can be trained. During this time, the character must spend at least 1 hour per day providing food and care to the animal. At the end of the befriending period, the character makes a proficiency throw with a penalty equal to the animal\'s Hit Dice. If the throw succeeds, the animal is befriended and can be trained as if the character had Animal Training proficiency. If the throw fails, the animal cannot be befriended by that character.\n\nBeast Friendship can only be used on animals with Intelligence 1-4. Animals with Intelligence less than 1 are too stupid to befriend, while those with Intelligence greater than 4 are too intelligent to be conditioned in this manner.'
  }
];

export function getAllProficiencies(): ProficiencyData[] {
  return proficiencyData;
}

export function getProficiencyById(id: string): ProficiencyData | undefined {
  return proficiencyData.find(prof => prof.id === id);
}

export function getRelatedProficiencies(id: string, category: string): ProficiencyData[] {
  return proficiencyData
    .filter(prof => prof.category === category && prof.id !== id)
    .slice(0, 5);
}
```

**Proficiency Type Definition:**

```typescript
// src/types/proficiency.ts
export interface ProficiencyData {
  id: string;
  name: string;
  category: string;
  prerequisites: string | null;
  description: string;
}

export interface ProficiencyCategory {
  id: string;
  name: string;
  count: number;
}
```

**CSS Enhancements for Proficiency Pages:**

```css
/* Add to global.css */
.proficiency-page .prose p {
  margin-bottom: 1.25rem;
  line-height: 1.7;
}

.proficiency-page h1 {
  font-family: 'Crimson Text', serif;
  letter-spacing: -0.025em;
}

.related-proficiencies a:hover {
  text-decoration: none;
}

@media (max-width: 640px) {
  .proficiency-header .flex {
    flex-direction: column;
    align-items: flex-start;
    gap: 0.5rem;
  }
}
```
</info added on 2025-06-06T08:38:00.321Z>

<info added on 2025-06-06T08:41:08.111Z>
# Equipment Chapter Implementation Success

**Equipment Table Rendering Optimization:**

```typescript
// Optimized table rendering for equipment lists
export function renderEquipmentTable(items: EquipmentItem[]): JSX.Element {
  return (
    <table className="acks-table equipment-table">
      <thead>
        <tr>
          <th>Item</th>
          <th>Cost</th>
          <th>Weight</th>
          <th>Notes</th>
        </tr>
      </thead>
      <tbody>
        {items.map((item, index) => (
          <tr key={`${item.name}-${index}`} className={item.special ? 'special-item' : ''}>
            <td>{item.name}</td>
            <td>{formatCost(item.cost)}</td>
            <td>{formatWeight(item.weight)}</td>
            <td>{item.notes}</td>
          </tr>
        ))}
      </tbody>
    </table>
  );
}

// Helper functions for formatting
function formatCost(cost: number | string): string {
  if (typeof cost === 'number') {
    if (cost >= 1) return `${cost} gp`;
    if (cost >= 0.1) return `${cost * 10} sp`;
    return `${cost * 100} cp`;
  }
  return cost; // For special cases like "varies"
}

function formatWeight(weight: number | string | null): string {
  if (weight === null) return '-';
  if (typeof weight === 'number') return `${weight} st`;
  return weight;
}
```

**Weapon Special Properties Component:**

```tsx
// components/WeaponProperties.tsx
export function WeaponProperties({ properties }: { properties: string[] }): JSX.Element {
  return (
    <div className="weapon-properties">
      {properties.map(property => {
        const [name, description] = getPropertyDetails(property);
        return (
          <span 
            key={name} 
            className="weapon-property" 
            title={description}
          >
            {name}
          </span>
        );
      })}
    </div>
  );
}

function getPropertyDetails(property: string): [string, string] {
  const propertyMap: Record<string, string> = {
    'cleave': 'Can strike multiple opponents when downing an enemy',
    'entangling': 'Can be used to entangle opponents',
    'handy': '+1 initiative when wielding',
    'impact': 'Double damage on a natural 20',
    'long': 'Can attack from second rank',
    'silver': 'Effective against certain monsters',
    'slow': '-1 initiative penalty',
    'thrown': 'Can be thrown as a ranged attack'
  };
  
  return [property, propertyMap[property.toLowerCase()] || ''];
}
```

**Armor Comparison Interactive Tool:**

```tsx
// components/ArmorComparator.tsx
import { useState } from 'react';
import { armorData } from '../data/equipment';

export function ArmorComparator(): JSX.Element {
  const [selectedArmors, setSelectedArmors] = useState<string[]>([]);
  
  const toggleArmor = (armorName: string) => {
    setSelectedArmors(prev => 
      prev.includes(armorName) 
        ? prev.filter(a => a !== armorName)
        : [...prev, armorName]
    );
  };
  
  const selectedArmorData = armorData.filter(a => 
    selectedArmors.includes(a.name)
  );
  
  return (
    <div className="armor-comparator">
      <h3>Compare Armor Types</h3>
      
      <div className="armor-selector">
        {armorData.map(armor => (
          <button
            key={armor.name}
            className={`armor-button ${selectedArmors.includes(armor.name) ? 'selected' : ''}`}
            onClick={() => toggleArmor(armor.name)}
          >
            {armor.name}
          </button>
        ))}
      </div>
      
      {selectedArmorData.length > 0 && (
        <table className="acks-table comparison-table">
          <thead>
            <tr>
              <th>Armor</th>
              <th>AC</th>
              <th>Cost</th>
              <th>Weight</th>
              <th>Category</th>
            </tr>
          </thead>
          <tbody>
            {selectedArmorData.map(armor => (
              <tr key={armor.name}>
                <td>{armor.name}</td>
                <td>{armor.ac}</td>
                <td>{formatCost(armor.cost)}</td>
                <td>{formatWeight(armor.weight)}</td>
                <td>{armor.category}</td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
}
```

**Equipment Encumbrance Calculator:**

```tsx
// components/EncumbranceCalculator.tsx
import { useState, useEffect } from 'react';
import { weaponData, armorData, equipmentData } from '../data/equipment';

export function EncumbranceCalculator(): JSX.Element {
  const [selectedItems, setSelectedItems] = useState<{id: string, count: number}[]>([]);
  const [totalWeight, setTotalWeight] = useState(0);
  const [movementRate, setMovementRate] = useState(120);
  
  // All equipment items combined for selection
  const allItems = [
    ...weaponData.map(w => ({...w, type: 'weapon'})),
    ...armorData.map(a => ({...a, type: 'armor'})),
    ...equipmentData.map(e => ({...e, type: 'equipment'}))
  ];
  
  // Add item to selected list
  const addItem = (itemId: string) => {
    setSelectedItems(prev => {
      const existing = prev.find(i => i.id === itemId);
      if (existing) {
        return prev.map(i => i.id === itemId ? {...i, count: i.count + 1} : i);
      } else {
        return [...prev, {id: itemId, count: 1}];
      }
    });
  };
  
  // Remove item from selected list
  const removeItem = (itemId: string) => {
    setSelectedItems(prev => {
      const existing = prev.find(i => i.id === itemId);
      if (existing && existing.count > 1) {
        return prev.map(i => i.id === itemId ? {...i, count: i.count - 1} : i);
      } else {
        return prev.filter(i => i.id !== itemId);
      }
    });
  };
  
  // Calculate total weight and movement rate
  useEffect(() => {
    let weight = 0;
    
    selectedItems.forEach(item => {
      const itemData = allItems.find(i => i.id === item.id);
      if (itemData && typeof itemData.weight === 'number') {
        weight += itemData.weight * item.count;
      }
    });
    
    setTotalWeight(weight);
    
    // Calculate movement rate based on encumbrance
    if (weight <= 5) {
      setMovementRate(120);
    } else if (weight <= 10) {
      setMovementRate(90);
    } else if (weight <= 15) {
      setMovementRate(60);
    } else if (weight <= 20) {
      setMovementRate(30);
    } else {
      setMovementRate(0);
    }
  }, [selectedItems]);
  
  return (
    <div className="encumbrance-calculator">
      <h3>Encumbrance Calculator</h3>
      
      <div className="item-selector">
        <select onChange={(e) => addItem(e.target.value)}>
          <option value="">-- Add Equipment --</option>
          <optgroup label="Weapons">
            {weaponData.map(w => (
              <option key={w.id} value={w.id}>{w.name}</option>
            ))}
          </optgroup>
          <optgroup label="Armor">
            {armorData.map(a => (
              <option key={a.id} value={a.id}>{a.name}</option>
            ))}
          </optgroup>
          <optgroup label="Equipment">
            {equipmentData.map(e => (
              <option key={e.id} value={e.id}>{e.name}</option>
            ))}
          </optgroup>
        </select>
      </div>
      
      {selectedItems.length > 0 && (
        <>
          <table className="acks-table selected-items">
            <thead>
              <tr>
                <th>Item</th>
                <th>Count</th>
                <th>Weight</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {selectedItems.map(item => {
                const itemData = allItems.find(i => i.id === item.id);
                return (
                  <tr key={item.id}>
                    <td>{itemData?.name}</td>
                    <td>{item.count}</td>
                    <td>{itemData && typeof itemData.weight === 'number' ? 
                      `${(itemData.weight * item.count).toFixed(1)} st` : '-'}</td>
                    <td>
                      <button onClick={() => addItem(item.id)}>+</button>
                      <button onClick={() => removeItem(item.id)}>-</button>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
          
          <div className="encumbrance-summary">
            <p><strong>Total Weight:</strong> {totalWeight.toFixed(1)} stone</p>
            <p><strong>Movement Rate:</strong> {movementRate}' per turn</p>
            <p><strong>Encumbrance Level:</strong> {
              totalWeight <= 5 ? 'Unencumbered' :
              totalWeight <= 10 ? 'Lightly Encumbered' :
              totalWeight <= 15 ? 'Heavily Encumbered' :
              totalWeight <= 20 ? 'Severely Encumbered' : 'Immobile'
            }</p>
          </div>
        </>
      )}
    </div>
  );
}
```

**Equipment Availability by Settlement Size:**

```tsx
// components/EquipmentAvailability.tsx
export function EquipmentAvailability(): JSX.Element {
  return (
    <table className="acks-table availability-table">
      <thead>
        <tr>
          <th>Settlement Size</th>
          <th>Equipment Availability</th>
          <th>Special Items</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>Village</td>
          <td>Basic weapons, light armor, common equipment</td>
          <td>None</td>
        </tr>
        <tr>
          <td>Small Town</td>
          <td>All common weapons, medium armor, adventuring gear</td>
          <td>Basic potions, scrolls (25% chance)</td>
        </tr>
        <tr>
          <td>Large Town</td>
          <td>All weapons, all armor, specialized equipment</td>
          <td>Common potions, scrolls (50% chance)</td>
        </tr>
        <tr>
          <td>City</td>
          <td>All equipment, custom orders available</td>
          <td>All potions, scrolls, minor magic items (25% chance)</td>
        </tr>
        <tr>
          <td>Major City</td>
          <td>All equipment, masterwork items available</td>
          <td>All potions, scrolls, minor magic items (50% chance)</td>
        </tr>
      </tbody>
    </table>
  );
}
```

**Equipment Quality Modifiers:**

```tsx
// components/EquipmentQuality.tsx
export function EquipmentQuality(): JSX.Element {
  return (
    <div className="equipment-quality">
      <h3>Equipment Quality Modifiers</h3>
      
      <table className="acks-table quality-table">
        <thead>
          <tr>
            <th>Quality</th>
            <th>Cost Modifier</th>
            <th>Effect</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Poor</td>
            <td>×0.5</td>
            <td>-1 to relevant rolls, breaks on natural 1</td>
          </tr>
          <tr>
            <td>Standard</td>
            <td>×1</td>
            <td>No modifiers</td>
          </tr>
          <tr>
            <td>Fine</td>
            <td>×2</td>
            <td>+1 to relevant rolls</td>
          </tr>
          <tr>
            <td>Excellent</td>
            <td>×5</td>
            <td>+2 to relevant rolls</td>
          </tr>
          <tr>
            <td>Masterwork</td>
            <td>×10</td>
            <td>+3 to relevant rolls, additional special property</td>
          </tr>
        </tbody>
      </table>
      
      <div className="quality-examples">
        <h4>Examples by Equipment Type:</h4>
        <ul>
          <li><strong>Weapons:</strong> Attack and damage rolls</li>
          <li><strong>Armor:</strong> AC bonus, encumbrance reduction</li>
          <li><strong>Tools:</strong> Proficiency throws using the tool</li>
          <li><strong>Clothing:</strong> Reaction rolls in social situations</li>
        </ul>
      </div>
    </div>
  );
}
```

**CSS for Equipment Components:**

```css
/* styles/equipment.css */
.equipment-table {
  width: 100%;
  margin-bottom: 2rem;
}

.equipment-table th {
  background-color: #2c3e50;
  color: white;
  text-align: left;
  padding: 0.75rem;
}

.equipment-table td {
  padding: 0.5rem 0.75rem;
  border-bottom: 1px solid #e2e8f0;
}

.equipment-table tr:nth-child(even) {
  background-color: #f8fafc;
}

.special-item {
  font-weight: 600;
}

.weapon-properties {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
  margin-top: 0.5rem;
}

.weapon-property {
  background-color: #e9d8fd;
  color: #6b46c1;
  padding: 0.25rem 0.5rem;
  border-radius: 0.25rem;
  font-size: 0.75rem;
  cursor: help;
}

.armor-comparator,
.encumbrance-calculator,
.equipment-quality {
  background-color: #f8fafc;
  border: 1px solid #e2e8f0;
  border-radius: 0.5rem;
  padding: 1.5rem;
  margin: 2rem 0;
}

.armor-selector,
.item-selector {
  margin-bottom: 1.5rem;
}

.armor-button {
  background-color: #e2e8f0;
  border: none;
  padding: 0.5rem 1rem;
  margin: 0.25rem;
  border-radius: 0.25rem;
  cursor: pointer;
}

.armor-button.selected {
  background-color: #4299e1;
  color: white;
}

.comparison-table,
.selected-items,
.availability-table,
.quality-table {
  width: 100%;
  margin-top: 1rem;
}

.encumbrance-summary {
  margin-top: 1.5rem;
  padding: 1rem;
  background-color: #ebf8ff;
  border-radius: 0.25rem;
}

.quality-examples {
  margin-top: 1.5rem;
}

.quality-examples ul {
  list-style-type: disc;
  padding-left: 1.5rem;
}

@media (max-width: 640px) {
  .armor-button {
    padding: 0.5rem;
    font-size: 0.875rem;
  }
  
  .equipment-table th,
  .equipment-table td {
    padding: 0.5rem;
    font-size: 0.875rem;
  }
}
```
</info added on 2025-06-06T08:41:08.111Z>

<info added on 2025-06-06T08:47:23.080Z>
# Chapter 4 Equipment - Implementation Details

## Table Rendering Optimization

```typescript
// Enhanced table rendering with responsive design
export function renderEquipmentTable(items: EquipmentItem[], options?: TableOptions): JSX.Element {
  const { sortable = false, filterable = false } = options || {};
  const [sortConfig, setSortConfig] = useState<SortConfig | null>(null);
  const [filterText, setFilterText] = useState('');
  
  // Apply sorting and filtering
  const processedItems = useMemo(() => {
    let result = [...items];
    
    // Apply filter
    if (filterText) {
      result = result.filter(item => 
        item.name.toLowerCase().includes(filterText.toLowerCase()) ||
        (item.notes && item.notes.toLowerCase().includes(filterText.toLowerCase()))
      );
    }
    
    // Apply sort
    if (sortConfig) {
      result.sort((a, b) => {
        const aValue = a[sortConfig.key];
        const bValue = b[sortConfig.key];
        
        if (typeof aValue === 'number' && typeof bValue === 'number') {
          return sortConfig.direction === 'asc' ? aValue - bValue : bValue - aValue;
        }
        
        const aString = String(aValue || '');
        const bString = String(bValue || '');
        return sortConfig.direction === 'asc' 
          ? aString.localeCompare(bString) 
          : bString.localeCompare(aString);
      });
    }
    
    return result;
  }, [items, sortConfig, filterText]);
  
  return (
    <div className="equipment-table-container">
      {filterable && (
        <div className="equipment-filter">
          <input
            type="text"
            placeholder="Filter items..."
            value={filterText}
            onChange={e => setFilterText(e.target.value)}
            className="equipment-filter-input"
          />
        </div>
      )}
      
      <table className="acks-table equipment-table">
        <thead>
          <tr>
            <th onClick={sortable ? () => handleSort('name') : undefined} className={sortable ? 'sortable' : ''}>
              Item {sortConfig?.key === 'name' && (sortConfig.direction === 'asc' ? '↑' : '↓')}
            </th>
            <th onClick={sortable ? () => handleSort('cost') : undefined} className={sortable ? 'sortable' : ''}>
              Cost {sortConfig?.key === 'cost' && (sortConfig.direction === 'asc' ? '↑' : '↓')}
            </th>
            <th onClick={sortable ? () => handleSort('weight') : undefined} className={sortable ? 'sortable' : ''}>
              Weight {sortConfig?.key === 'weight' && (sortConfig.direction === 'asc' ? '↑' : '↓')}
            </th>
            <th>Notes</th>
          </tr>
        </thead>
        <tbody>
          {processedItems.length > 0 ? (
            processedItems.map((item, index) => (
              <tr key={`${item.name}-${index}`} className={item.special ? 'special-item' : ''}>
                <td>{item.name}</td>
                <td>{formatCost(item.cost)}</td>
                <td>{formatWeight(item.weight)}</td>
                <td>{item.notes}</td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan={4} className="no-results">No matching items found</td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  );
}
```

## Weapon Special Properties Implementation

```typescript
// Weapon properties tooltip system with hover effects
export const WeaponPropertyTooltip: React.FC<{property: string}> = ({ property }) => {
  const [showTooltip, setShowTooltip] = useState(false);
  const tooltipRef = useRef<HTMLDivElement>(null);
  const [tooltipPosition, setTooltipPosition] = useState({ top: 0, left: 0 });
  
  const propertyDetails = {
    'cleave': 'When you drop an opponent with a melee attack, you may immediately make another melee attack against an opponent within 5\'.',
    'entangling': 'On a successful hit, target must save vs. Paralysis or be entangled and unable to move.',
    'handy': 'Grants +1 to initiative rolls when wielding this weapon.',
    'impact': 'On a natural 20, deals double damage and may stun the target (save vs. Paralysis).',
    'long': 'Can attack from the second rank, behind front-line fighters.',
    'silver': 'Effective against monsters vulnerable to silver, such as lycanthropes and certain undead.',
    'slow': 'Imposes a -1 penalty to initiative rolls when wielding this weapon.',
    'thrown': 'Can be thrown as a ranged attack with listed range increments.'
  };
  
  const description = propertyDetails[property.toLowerCase()] || 'Special weapon property';
  
  const handleMouseEnter = (e: React.MouseEvent) => {
    const rect = e.currentTarget.getBoundingClientRect();
    setTooltipPosition({
      top: rect.bottom + window.scrollY,
      left: rect.left + window.scrollX
    });
    setShowTooltip(true);
  };
  
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (tooltipRef.current && !tooltipRef.current.contains(event.target as Node)) {
        setShowTooltip(false);
      }
    };
    
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);
  
  return (
    <span 
      className="weapon-property"
      onMouseEnter={handleMouseEnter}
      onMouseLeave={() => setShowTooltip(false)}
    >
      {property}
      {showTooltip && (
        <div 
          ref={tooltipRef}
          className="weapon-property-tooltip"
          style={{
            top: `${tooltipPosition.top}px`,
            left: `${tooltipPosition.left}px`
          }}
        >
          {description}
        </div>
      )}
    </span>
  );
};
```

## Equipment Data Structure

```typescript
// Comprehensive equipment data structure
export interface EquipmentItem {
  id: string;
  name: string;
  cost: number | string;
  weight: number | string | null;
  notes: string;
  special?: boolean;
  category?: string;
  subcategory?: string;
}

export interface WeaponItem extends EquipmentItem {
  damage: string;
  properties: string[];
  range?: string;
  ac?: number;
  hands: 1 | 2;
}

export interface ArmorItem extends EquipmentItem {
  ac: number;
  category: 'Very Light' | 'Light' | 'Medium' | 'Heavy' | 'Shield' | 'Helmet';
  movementReduction?: number;
}

// Sample weapon data implementation
export const weaponData: WeaponItem[] = [
  {
    id: 'battle-axe',
    name: 'Battle Axe',
    cost: 7,
    weight: 6,
    damage: '1d8',
    properties: ['cleave'],
    hands: 1,
    notes: 'Versatile - can be used two-handed for 1d10 damage',
    category: 'Melee',
    subcategory: 'Axes'
  },
  {
    id: 'great-axe',
    name: 'Great Axe',
    cost: 14,
    weight: 10,
    damage: '1d10',
    properties: ['cleave', 'slow'],
    hands: 2,
    notes: 'Two-handed weapon with powerful cleaving ability',
    category: 'Melee',
    subcategory: 'Axes'
  },
  // Additional weapons...
];
```

## Encumbrance Calculator Implementation

```typescript
// Enhanced encumbrance calculator with character stats integration
export function EncumbranceCalculator(): JSX.Element {
  const [characterStrength, setCharacterStrength] = useState<number>(10);
  const [selectedItems, setSelectedItems] = useState<{id: string, count: number}[]>([]);
  const [totalWeight, setTotalWeight] = useState(0);
  const [movementRate, setMovementRate] = useState(120);
  const [encumbranceLevel, setEncumbranceLevel] = useState('Unencumbered');
  
  // Calculate strength modifier for encumbrance
  const strengthModifier = useMemo(() => {
    if (characterStrength >= 18) return 3;
    if (characterStrength >= 16) return 2;
    if (characterStrength >= 13) return 1;
    if (characterStrength <= 5) return -1;
    if (characterStrength <= 3) return -2;
    return 0;
  }, [characterStrength]);
  
  // Calculate adjusted encumbrance thresholds based on strength
  const encumbranceThresholds = useMemo(() => {
    const baseThresholds = {
      unencumbered: 5,
      light: 10,
      heavy: 15,
      severe: 20
    };
    
    return {
      unencumbered: Math.max(1, baseThresholds.unencumbered + strengthModifier),
      light: Math.max(2, baseThresholds.light + strengthModifier),
      heavy: Math.max(3, baseThresholds.heavy + strengthModifier),
      severe: Math.max(4, baseThresholds.severe + strengthModifier)
    };
  }, [strengthModifier]);
  
  // Calculate total weight and movement rate
  useEffect(() => {
    let weight = 0;
    
    selectedItems.forEach(item => {
      const itemData = allItems.find(i => i.id === item.id);
      if (itemData && typeof itemData.weight === 'number') {
        weight += itemData.weight * item.count;
      }
    });
    
    setTotalWeight(weight);
    
    // Calculate movement rate and encumbrance level based on adjusted thresholds
    if (weight <= encumbranceThresholds.unencumbered) {
      setMovementRate(120);
      setEncumbranceLevel('Unencumbered');
    } else if (weight <= encumbranceThresholds.light) {
      setMovementRate(90);
      setEncumbranceLevel('Lightly Encumbered');
    } else if (weight <= encumbranceThresholds.heavy) {
      setMovementRate(60);
      setEncumbranceLevel('Heavily Encumbered');
    } else if (weight <= encumbranceThresholds.severe) {
      setMovementRate(30);
      setEncumbranceLevel('Severely Encumbered');
    } else {
      setMovementRate(0);
      setEncumbranceLevel('Immobile');
    }
  }, [selectedItems, encumbranceThresholds]);
  
  return (
    <div className="encumbrance-calculator">
      <h3>Encumbrance Calculator</h3>
      
      <div className="character-stats">
        <label>
          Character Strength:
          <input
            type="number"
            min="3"
            max="18"
            value={characterStrength}
            onChange={(e) => setCharacterStrength(parseInt(e.target.value) || 10)}
          />
        </label>
        <div className="strength-info">
          <span>Strength Modifier: {strengthModifier > 0 ? `+${strengthModifier}` : strengthModifier}</span>
          <span>Adjusted Capacity: {encumbranceThresholds.severe} stone</span>
        </div>
      </div>
      
      {/* Rest of the component remains the same */}
    </div>
  );
}
```

## Equipment Quality System

```typescript
// Equipment quality modifiers with visual indicators
export function applyQualityModifiers(item: EquipmentItem, quality: 'poor' | 'standard' | 'fine' | 'excellent' | 'masterwork'): EquipmentItem {
  const qualityModifiers = {
    poor: { costMod: 0.5, effect: '-1 to relevant rolls, breaks on natural 1' },
    standard: { costMod: 1, effect: 'No modifiers' },
    fine: { costMod: 2, effect: '+1 to relevant rolls' },
    excellent: { costMod: 5, effect: '+2 to relevant rolls' },
    masterwork: { costMod: 10, effect: '+3 to relevant rolls, additional special property' }
  };
  
  const modifier = qualityModifiers[quality];
  const adjustedCost = typeof item.cost === 'number' ? item.cost * modifier.costMod : item.cost;
  
  return {
    ...item,
    cost: adjustedCost,
    name: quality !== 'standard' ? `${quality.charAt(0).toUpperCase() + quality.slice(1)} ${item.name}` : item.name,
    notes: item.notes ? `${item.notes}. Quality: ${modifier.effect}` : `Quality: ${modifier.effect}`,
    special: quality === 'masterwork' || quality === 'excellent' || item.special
  };
}

// Component to display equipment with quality options
export function QualityEquipmentDisplay({ item }: { item: EquipmentItem }): JSX.Element {
  const [selectedQuality, setSelectedQuality] = useState<'poor' | 'standard' | 'fine' | 'excellent' | 'masterwork'>('standard');
  const modifiedItem = applyQualityModifiers(item, selectedQuality);
  
  return (
    <div className={`equipment-item quality-${selectedQuality}`}>
      <div className="equipment-item-header">
        <h4>{modifiedItem.name}</h4>
        <div className="quality-selector">
          <button 
            className={selectedQuality === 'poor' ? 'active' : ''}
            onClick={() => setSelectedQuality('poor')}
          >
            Poor
          </button>
          <button 
            className={selectedQuality === 'standard' ? 'active' : ''}
            onClick={() => setSelectedQuality('standard')}
          >
            Standard
          </button>
          <button 
            className={selectedQuality === 'fine' ? 'active' : ''}
            onClick={() => setSelectedQuality('fine')}
          >
            Fine
          </button>
          <button 
            className={selectedQuality === 'excellent' ? 'active' : ''}
            onClick={() => setSelectedQuality('excellent')}
          >
            Excellent
          </button>
          <button 
            className={selectedQuality === 'masterwork' ? 'active' : ''}
            onClick={() => setSelectedQuality('masterwork')}
          >
            Masterwork
          </button>
        </div>
      </div>
      
      <div className="equipment-item-details">
        <div className="detail-row">
          <span className="detail-label">Cost:</span>
          <span className="detail-value">{formatCost(modifiedItem.cost)}</span>
        </div>
        <div className="detail-row">
          <span className="detail-label">Weight:</span>
          <span className="detail-value">{formatWeight(modifiedItem.weight)}</span>
        </div>
        <div className="detail-row">
          <span className="detail-label">Notes:</span>
          <span className="detail-value">{modifiedItem.notes}</span>
        </div>
      </div>
    </div>
  );
}
```

## Equipment Chapter Navigation

```typescript
// Enhanced chapter navigation with equipment categories
export function EquipmentNavigation(): JSX.Element {
  return (
    <nav className="equipment-navigation">
      <h3>Equipment Categories</h3>
      <ul className="equipment-nav-list">
        <li>
          <a href="#weapons">Weapons</a>
          <ul>
            <li><a href="#melee-weapons">Melee Weapons</a></li>
            <li><a href="#ranged-weapons">Ranged Weapons</a></li>
            <li><a href="#weapon-properties">Weapon Properties</a></li>
          </ul>
        </li>
        <li>
          <a href="#armor">Armor & Shields</a>
          <ul>
            <li><a href="#armor-types">Armor Types</a></li>
            <li><a href="#shields">Shields</a></li>
            <li><a href="#helmets">Helmets</a></li>
          </ul>
        </li>
        <li>
          <a href="#adventuring-gear">Adventuring Gear</a>
          <ul>
            <li><a href="#essential-equipment">Essential Equipment</a></li>
            <li><a href="#professional-tools">Professional Tools</a></li>
            <li><a href="#containers">Containers & Storage</a></li>
          </ul>
        </li>
        <li>
          <a href="#encumbrance">Encumbrance Rules</a>
        </li>
        <li>
          <a href="#equipment-quality">Equipment Quality</a>
        </li>
      </ul>
      
      <div className="chapter-navigation">
        <a href="/rules/chapter-3-proficiencies" className="prev-chapter">
          ← Chapter 3: Proficiencies
        </a>
        <a href="/rules/chapter-5-spells" className="next-chapter">
          Chapter 5: Spells →
        </a>
      </div>
    </nav>
  );
}
```

## Equipment CSS Enhancements

```css
/* Enhanced equipment styling */
.equipment-table-container {
  margin-bottom: 2rem;
  overflow-x: auto;
}

.equipment-filter {
  margin-bottom: 1rem;
}

.equipment-filter-input {
  padding: 0.5rem;
  border: 1px solid #cbd5e0;
  border-radius: 0.25rem;
  width: 100%;
  max-width: 300px;
}

.equipment-table th.sortable {
  cursor: pointer;
  user-select: none;
}

.equipment-table th.sortable:hover {
  background-color: #1a365d;
}

.weapon-property {
  position: relative;
  display: inline-block;
  margin-right: 0.5rem;
  margin-bottom: 0.5rem;
  cursor: help;
}

.weapon-property-tooltip {
  position: absolute;
  z-index: 10;
  width: 250px;
  background-color: #2d3748;
  color: white;
  padding: 0.75rem;
  border-radius: 0.25rem;
  font-size: 0.875rem;
  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
}

.equipment-item {
  border: 1px solid #e2e8f0;
  border-radius: 0.5rem;
  padding: 1rem;
  margin-bottom: 1rem;
}

.equipment-item.quality-poor {
  border-color: #fc8181;
  background-color: #fff5f5;
}

.equipment-item.quality-fine {
  border-color: #4299e1;
  background-color: #ebf8ff;
}

.equipment-item.quality-excellent {
  border-color: #48bb78;
  background-color: #f0fff4;
}

.equipment-item.quality-masterwork {
  border-color: #805ad5;
  background-color: #faf5ff;
}

.quality-selector {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
  margin-top: 0.5rem;
}

.quality-selector button {
  padding: 0.25rem 0.5rem;
  border: 1px solid #e2e8f0;
  border-radius: 0.25rem;
  background-color: white;
  cursor: pointer;
}

.quality-selector button.active {
  background-color: #4a5568;
  color: white;
}

.equipment-navigation {
  background-color: #f7fafc;
  border: 1px solid #e2e8f0;
  border-radius: 0.5rem;
  padding: 1.5rem;
  margin: 2rem 0;
}

.equipment-nav-list {
  list-style-type: none;
  padding: 0;
}

.equipment-nav-list li {
  margin-bottom: 0.5rem;
}

.equipment-nav-list ul {
  list-style-type: none;
  padding-left: 1.5rem;
  margin-top: 0.25rem;
}

.chapter-navigation {
  display: flex;
  justify-content: space-between;
  margin-top: 2rem;
  padding-top: 1rem;
  border-top: 1px solid #e2e8f0;
}

.prev-chapter,
.next-chapter {
  color: #4a5568;
  text-decoration: none;
}

.prev-chapter:hover,
.next-chapter:hover {
  color: #2d3748;
  text-decoration: underline;
}
```
</info added on 2025-06-06T08:47:23.080Z>

## 3. Develop Navigation Systems [pending]
### Dependencies: 14.1, 14.2
### Description: Implement breadcrumb navigation, in-chapter table of contents, and cross-chapter navigation controls
### Details:
Implementation steps:
1. Create a breadcrumb component showing the current location in the rulebook
2. Generate an in-chapter table of contents based on the headings in each chapter
3. Implement the sidebar navigation that displays the TOC for easy in-chapter navigation
4. Add previous/next chapter navigation controls at the bottom of each page
5. Ensure all navigation elements update correctly when moving between pages
6. Make the sidebar TOC collapsible/expandable for better user experience
7. Highlight the current section in the TOC when scrolling through content

Testing approach:
- Verify breadcrumbs accurately reflect the current location
- Test that TOC links correctly scroll to the right sections
- Confirm prev/next navigation moves to the correct chapters
- Check that the current section is properly highlighted in the TOC
- Test navigation on different devices and screen sizes

## 4. Update Internal References and Image Integration [pending]
### Dependencies: 14.2, 14.3
### Description: Update all internal references to point to the new structure and ensure all images are properly linked and displayed
### Details:
Implementation steps:
1. Create a reference mapping between old URLs and new chapter-based URLs
2. Scan all content for internal references and update them to point to the new structure
3. Identify all image references in the content
4. Update image paths as needed to maintain proper linking
5. Implement image loading and display in the new chapter-based format
6. Verify images appear correctly in their proper context
7. Add appropriate image captions and styling

Testing approach:
- Click through all internal references to verify they link to the correct locations
- Check that all images load properly and are displayed in the correct context
- Verify image captions and styling are consistent
- Test image display on different screen sizes and devices

## 5. Implement URL Redirects and Final Review [pending]
### Dependencies: 14.1, 14.2, 14.3, 14.4
### Description: Set up redirects from old individual page URLs to new chapter-based URLs and perform comprehensive testing
### Details:
Implementation steps:
1. Create a comprehensive mapping of old URLs to new chapter-based URLs
2. Implement redirect rules in the routing configuration
3. Set up server-side redirects for SEO purposes
4. Test all redirects to ensure they point to the correct new locations
5. Perform a comprehensive review of all chapters and appendices
6. Check for any content gaps, formatting issues, or navigation problems
7. Verify all requirements from RULEBOOK_REORG_PLAN.md are implemented
8. Optimize page loading performance

Testing approach:
- Test all old URLs to ensure they redirect to the correct new locations
- Perform end-to-end testing of the entire rulebook navigation
- Verify all content is accessible through the new structure
- Check for any broken links or missing images
- Test the entire implementation on multiple browsers and devices
- Verify SEO-friendly aspects like proper redirects and semantic structure

