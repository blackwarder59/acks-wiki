---
description: 
globs: 
alwaysApply: false
---
# Project Structure Map

> **Note:** This is a living document. It should be updated periodically as the project evolves. When new directories are added or the project structure changes significantly, this map should be refreshed to reflect the current state of the codebase.

This document serves as a "living map" of the ACKS II Wiki codebase. It outlines the purpose of each major directory in a visual tree format to provide context and guidance for development.

```
.
├── .cursor/
│   └── rules/                  # Custom rules for the AI assistant, like this map.
├── public/                     # Static assets (images, fonts) served directly.
├── scripts/                    # Standalone scripts for content processing, data extraction, etc.
├── src/                        # The heart of the Next.js application.
│   ├── app/                    # Core of the App Router, defines all URL routes.
│   │   ├── layout.tsx          # Root layout for the entire application.
│   │   ├── page.tsx            # The main homepage component.
│   │   ├── api/                # Route handlers for API endpoints.
│   │   ├── monsters/           # Routes for the Monster Manual section.
│   │   ├── rules/              # Routes for the Rulebook section (e.g., /rules/chapter-1).
│   │   └── ... (other routes)
│   │
│   ├── components/             # All reusable React components.
│   │   ├── ui/                 # "Dumb" UI components (Button, Card, Tooltip).
│   │   ├── layout/             # Page structure components (Header, Footer).
│   │   ├── content/            # Components for rendering specific ACKS content.
│   │   ├── navigation/         # Navigation-related components (Breadcrumb).
│   │   └── rulebook/           # Components for the rulebook (ChapterLayout).
│   │
│   ├── lib/                      # Core logic, helpers, and utilities (non-React).
│   │   ├── content/            # Raw integrated markdown content for the rulebook.
│   │   ├── rulebook/           # The `content-loader.ts` for parsing rulebook chapters.
│   │   ├── parsers/            # Utilities for parsing markdown into structured JSON.
│   │   ├── hooks/              # Custom React hooks (e.g., `useBookmarks`).
│   │   ├── types/              # TypeScript type definitions and interfaces.
│   │   └── utils.ts            # General-purpose utility functions.
│   │
│   ├── data/                     # Processed JSON data files used by the app.
│   └── styles/                   # Global CSS, design tokens, and stylesheets.
│
├── content/                    # Raw, original ACKS II markdown source files.
├── processed_content/          # Structured JSON output from the parsing scripts.
├── tasks/                      # Project task definitions and plans.
├── *_REORG_PLAN.md             # Documents detailing content reorganization strategy.
└── ... (config files, etc.)
```

## Root Directory

-   `src/`: The heart of the Next.js application, containing all source code.
-   `.cursor/rules/`: Contains custom rules for the Cursor AI assistant, including this map. These rules help the AI understand the project's conventions and structure.
-   `public/`: Stores static assets like images, fonts, and icons that are served directly by the browser.
-   `scripts/`: Holds various Node.js and TypeScript scripts used for one-off tasks like content processing, data extraction, and other development utilities.
-   `content/`: Contains the raw, original ACKS II markdown content files. The application's data processing pipeline reads from here.
-   `processed_content/`: The destination for structured JSON data after the raw markdown from `content/` has been parsed by scripts in `scripts/`. The application reads this processed data.
-   `tasks/`: Contains task definitions and plans, often generated by or used with a task management system.
-   `*_REORG_PLAN.md`: Markdown files detailing the reorganization strategy for different sections of the wiki (Rulebook, Monster Manual, etc.).

## `src` Directory - The Application Core

This is where the main application logic resides.

-   `src/app/`: The core of the Next.js App Router. Each folder inside this directory corresponds to a URL route.
    -   `layout.tsx`: The root layout for the entire application.
    -   `page.tsx`: The main homepage component.
    -   `(routes)/`: Subdirectories define the URL structure. For example, `src/app/rules/chapter-1-characters/page.tsx` creates the page for that specific rulebook chapter.
-   `src/components/`: Contains all reusable React components used throughout the application.
    -   `ui/`: "Dumb" UI components like `Button`, `Card`, `Tooltip`. These are general-purpose and don't contain business logic.
    -   `layout/`: Components related to the overall page structure, like `Header`, `Footer`, and `Sidebar`.
    -   `content/`: Components specifically designed to render the processed ACKS II content, such as `MonsterCard` or `SpellList`.
    -   `navigation/`: Components related to site navigation, like `Breadcrumb` or chapter lists.
    -   `rulebook/`: Components specifically for the rulebook section, like the `ChapterLayout` and `ChapterTemplate` that we recently refactored.
-   `src/lib/`: Houses the application's core logic, helpers, and utilities that are not React components.
    -   `content/`: Raw markdown content files that have been integrated directly into the source tree. This is a key location for the rulebook's content.
    -   `rulebook/`: Contains the crucial `content-loader.ts` file, responsible for reading and parsing the rulebook chapter files from `src/lib/content/rulebook/`.
    -   `parsers/`: A suite of functions and utilities for parsing the raw markdown content into structured JSON.
    -   `hooks/`: Custom React hooks (e.g., `useBookmarks`) that encapsulate reusable stateful logic.
    -   `types/`: TypeScript type definitions and interfaces used across the application (e.g., `content.ts`).
    -   `utils.ts`: A collection of general-purpose utility functions.
-   `src/data/`: Stores the final, processed JSON data files that the application imports and uses to render content. This is the output from the `scripts/` processors.
-   `src/styles/`: Contains global CSS styles and design tokens.
